// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package rabbit

import (
	"github.com/aide-cloud/moon/cmd/server/rabbit/internal/biz"
	"github.com/aide-cloud/moon/cmd/server/rabbit/internal/data"
	"github.com/aide-cloud/moon/cmd/server/rabbit/internal/data/repoimpl"
	"github.com/aide-cloud/moon/cmd/server/rabbit/internal/rabbitconf"
	"github.com/aide-cloud/moon/cmd/server/rabbit/internal/server"
	"github.com/aide-cloud/moon/cmd/server/rabbit/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *rabbitconf.Bootstrap, logger log.Logger) (*kratos.App, func(), error) {
	grpcServer := server.NewGRPCServer(bootstrap)
	httpServer := server.NewHTTPServer(bootstrap)
	dataData, cleanup, err := data.NewData(bootstrap)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := data.NewGreeterRepo(dataData)
	cacheRepo := repoimpl.NewCacheRepo(dataData)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, cacheRepo)
	greeterService := service.NewGreeterService(greeterUsecase)
	configBiz := biz.NewConfigBiz(bootstrap, cacheRepo)
	configService := service.NewConfigService(configBiz)
	msgBiz := biz.NewMsgBiz(bootstrap)
	hookService := service.NewHookService(msgBiz)
	serverServer := server.RegisterService(grpcServer, httpServer, greeterService, configService, hookService)
	app := newApp(serverServer, logger)
	return app, func() {
		cleanup()
	}, nil
}
