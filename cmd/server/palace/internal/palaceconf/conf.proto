syntax = "proto3";

package moon.cmd.server.palace.internal.palaceconf;

import "google/protobuf/duration.proto";
import "global.proto";

option go_package = "github.com/aide-family/moon/cmd/server/palace/internal/palaceconf;palaceconf";

message Bootstrap {
  Server server = 1;
  Data data = 2;
  string env = 3;
  MicroServer micro_server = 4;
  // 服务发现配置， 如果配置了服务发现，endpoint则会被当作服务发现地址, 没有配置直接当作服务地址
  api.Discovery discovery = 5;
  Watch watch = 6;
  // 链路追踪
  api.Tracer tracer = 7;
  OAuth2 oauth2 = 8;
  // 全局邮件配置
  api.EmailConfig global_email_config = 9;
  string redirect_uri = 10;
}

message Server {
  message HTTP {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
  }
  message GRPC {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
  }

  message JWT {
    string sign_key = 1;
    string issuer = 2;
    google.protobuf.Duration expire = 4;
    // 免登录白名单
    repeated string white_list = 6;
    // 免rbac白名单
    repeated string rbac_white_list = 7;
    // 黑名单
    repeated string black_list = 8;
  }

  HTTP http = 1;
  GRPC grpc = 2;
  string name = 3;
  map<string, string> metadata = 4;
  JWT jwt = 5;
}

message Data {
  message Database {
    string driver = 1;
    string dsn = 2;
    bool debug = 3;
  }

  message Cache {
    message Redis {
      string network = 1;
      string addr = 2;
      google.protobuf.Duration read_timeout = 3;
      google.protobuf.Duration write_timeout = 4;
      string password = 5;
      uint32 db = 6;
      google.protobuf.Duration dial_timeout = 7;
    }
    message NutsDB {
      string path = 1;
      string bucket = 2;
    }
    message Free {
      uint32 size = 1;
    }
    Redis redis = 1;
    NutsDB nutsDB = 2;
    Free free = 3;
  }

  // 主库, 用于维护系统配置、用户等
  Database database = 1;
  // 业务数据库，多租户场景下的业务数据， 业务数据采用分表存储
  Database bizDatabase = 2;
  // 告警历史存储位置
  Database alarmDatabase = 3;
  // 缓存，支持多缓存方式
  Cache cache = 4;
}

// 微服务配置
message MicroServer {
  // 月兔消息服务
  api.Server rabbit_server = 1;
  // 后羿代理服务
  api.Server hou_yi_server = 2;
  // 后羿服务多实例配置（此配置优先级高于单实例配置）
  repeated api.Server hou_yi_servers = 3;
}

message Watch {
  message Strategy {
    // 超时时间
    google.protobuf.Duration timeout = 1;
    // 执行频率 cron 表达式
    string interval = 2;
  }
  message AlertEvent {
    // 超时时间
    google.protobuf.Duration timeout = 1;
    // 执行频率
    google.protobuf.Duration interval = 2;
  }
  Strategy strategy = 1;
  AlertEvent alertEvent = 2;
}

message OAuth2 {
  message Config {
    string client_id = 1;
    string client_secret = 2;
    string callback_uri = 3;
    repeated string scopes = 5;
  }

  Config github = 1;
  Config gitee = 2;
}