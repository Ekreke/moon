// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/aide-cloud/moon/cmd/server/palace/internal/biz/do/model"
)

func newSysTeamMember(db *gorm.DB, opts ...gen.DOOption) sysTeamMember {
	_sysTeamMember := sysTeamMember{}

	_sysTeamMember.sysTeamMemberDo.UseDB(db, opts...)
	_sysTeamMember.sysTeamMemberDo.UseModel(&model.SysTeamMember{})

	tableName := _sysTeamMember.sysTeamMemberDo.TableName()
	_sysTeamMember.ALL = field.NewAsterisk(tableName)
	_sysTeamMember.ID = field.NewUint32(tableName, "id")
	_sysTeamMember.CreatedAt = field.NewTime(tableName, "created_at")
	_sysTeamMember.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sysTeamMember.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_sysTeamMember.UserID = field.NewUint32(tableName, "user_id")
	_sysTeamMember.TeamID = field.NewUint32(tableName, "team_id")
	_sysTeamMember.Status = field.NewInt(tableName, "status")
	_sysTeamMember.Role = field.NewInt(tableName, "role")
	_sysTeamMember.Member = sysTeamMemberHasOneMember{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Member", "model.SysUser"),
	}

	_sysTeamMember.Team = sysTeamMemberHasOneTeam{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Team", "model.SysTeam"),
	}

	_sysTeamMember.TeamRoles = sysTeamMemberManyToManyTeamRoles{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("TeamRoles", "model.SysTeamRole"),
	}

	_sysTeamMember.fillFieldMap()

	return _sysTeamMember
}

type sysTeamMember struct {
	sysTeamMemberDo

	ALL       field.Asterisk
	ID        field.Uint32
	CreatedAt field.Time // 创建时间
	UpdatedAt field.Time // 更新时间
	DeletedAt field.Int64
	UserID    field.Uint32 // 系统用户ID
	TeamID    field.Uint32 // 团队ID
	Status    field.Int    // 状态
	Role      field.Int    // 是否是管理员
	Member    sysTeamMemberHasOneMember

	Team sysTeamMemberHasOneTeam

	TeamRoles sysTeamMemberManyToManyTeamRoles

	fieldMap map[string]field.Expr
}

func (s sysTeamMember) Table(newTableName string) *sysTeamMember {
	s.sysTeamMemberDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysTeamMember) As(alias string) *sysTeamMember {
	s.sysTeamMemberDo.DO = *(s.sysTeamMemberDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysTeamMember) updateTableName(table string) *sysTeamMember {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint32(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewInt64(table, "deleted_at")
	s.UserID = field.NewUint32(table, "user_id")
	s.TeamID = field.NewUint32(table, "team_id")
	s.Status = field.NewInt(table, "status")
	s.Role = field.NewInt(table, "role")

	s.fillFieldMap()

	return s
}

func (s *sysTeamMember) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysTeamMember) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["team_id"] = s.TeamID
	s.fieldMap["status"] = s.Status
	s.fieldMap["role"] = s.Role

}

func (s sysTeamMember) clone(db *gorm.DB) sysTeamMember {
	s.sysTeamMemberDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysTeamMember) replaceDB(db *gorm.DB) sysTeamMember {
	s.sysTeamMemberDo.ReplaceDB(db)
	return s
}

type sysTeamMemberHasOneMember struct {
	db *gorm.DB

	field.RelationField
}

func (a sysTeamMemberHasOneMember) Where(conds ...field.Expr) *sysTeamMemberHasOneMember {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a sysTeamMemberHasOneMember) WithContext(ctx context.Context) *sysTeamMemberHasOneMember {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a sysTeamMemberHasOneMember) Session(session *gorm.Session) *sysTeamMemberHasOneMember {
	a.db = a.db.Session(session)
	return &a
}

func (a sysTeamMemberHasOneMember) Model(m *model.SysTeamMember) *sysTeamMemberHasOneMemberTx {
	return &sysTeamMemberHasOneMemberTx{a.db.Model(m).Association(a.Name())}
}

type sysTeamMemberHasOneMemberTx struct{ tx *gorm.Association }

func (a sysTeamMemberHasOneMemberTx) Find() (result *model.SysUser, err error) {
	return result, a.tx.Find(&result)
}

func (a sysTeamMemberHasOneMemberTx) Append(values ...*model.SysUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a sysTeamMemberHasOneMemberTx) Replace(values ...*model.SysUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a sysTeamMemberHasOneMemberTx) Delete(values ...*model.SysUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a sysTeamMemberHasOneMemberTx) Clear() error {
	return a.tx.Clear()
}

func (a sysTeamMemberHasOneMemberTx) Count() int64 {
	return a.tx.Count()
}

type sysTeamMemberHasOneTeam struct {
	db *gorm.DB

	field.RelationField
}

func (a sysTeamMemberHasOneTeam) Where(conds ...field.Expr) *sysTeamMemberHasOneTeam {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a sysTeamMemberHasOneTeam) WithContext(ctx context.Context) *sysTeamMemberHasOneTeam {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a sysTeamMemberHasOneTeam) Session(session *gorm.Session) *sysTeamMemberHasOneTeam {
	a.db = a.db.Session(session)
	return &a
}

func (a sysTeamMemberHasOneTeam) Model(m *model.SysTeamMember) *sysTeamMemberHasOneTeamTx {
	return &sysTeamMemberHasOneTeamTx{a.db.Model(m).Association(a.Name())}
}

type sysTeamMemberHasOneTeamTx struct{ tx *gorm.Association }

func (a sysTeamMemberHasOneTeamTx) Find() (result *model.SysTeam, err error) {
	return result, a.tx.Find(&result)
}

func (a sysTeamMemberHasOneTeamTx) Append(values ...*model.SysTeam) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a sysTeamMemberHasOneTeamTx) Replace(values ...*model.SysTeam) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a sysTeamMemberHasOneTeamTx) Delete(values ...*model.SysTeam) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a sysTeamMemberHasOneTeamTx) Clear() error {
	return a.tx.Clear()
}

func (a sysTeamMemberHasOneTeamTx) Count() int64 {
	return a.tx.Count()
}

type sysTeamMemberManyToManyTeamRoles struct {
	db *gorm.DB

	field.RelationField
}

func (a sysTeamMemberManyToManyTeamRoles) Where(conds ...field.Expr) *sysTeamMemberManyToManyTeamRoles {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a sysTeamMemberManyToManyTeamRoles) WithContext(ctx context.Context) *sysTeamMemberManyToManyTeamRoles {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a sysTeamMemberManyToManyTeamRoles) Session(session *gorm.Session) *sysTeamMemberManyToManyTeamRoles {
	a.db = a.db.Session(session)
	return &a
}

func (a sysTeamMemberManyToManyTeamRoles) Model(m *model.SysTeamMember) *sysTeamMemberManyToManyTeamRolesTx {
	return &sysTeamMemberManyToManyTeamRolesTx{a.db.Model(m).Association(a.Name())}
}

type sysTeamMemberManyToManyTeamRolesTx struct{ tx *gorm.Association }

func (a sysTeamMemberManyToManyTeamRolesTx) Find() (result []*model.SysTeamRole, err error) {
	return result, a.tx.Find(&result)
}

func (a sysTeamMemberManyToManyTeamRolesTx) Append(values ...*model.SysTeamRole) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a sysTeamMemberManyToManyTeamRolesTx) Replace(values ...*model.SysTeamRole) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a sysTeamMemberManyToManyTeamRolesTx) Delete(values ...*model.SysTeamRole) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a sysTeamMemberManyToManyTeamRolesTx) Clear() error {
	return a.tx.Clear()
}

func (a sysTeamMemberManyToManyTeamRolesTx) Count() int64 {
	return a.tx.Count()
}

type sysTeamMemberDo struct{ gen.DO }

type ISysTeamMemberDo interface {
	gen.SubQuery
	Debug() ISysTeamMemberDo
	WithContext(ctx context.Context) ISysTeamMemberDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysTeamMemberDo
	WriteDB() ISysTeamMemberDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysTeamMemberDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysTeamMemberDo
	Not(conds ...gen.Condition) ISysTeamMemberDo
	Or(conds ...gen.Condition) ISysTeamMemberDo
	Select(conds ...field.Expr) ISysTeamMemberDo
	Where(conds ...gen.Condition) ISysTeamMemberDo
	Order(conds ...field.Expr) ISysTeamMemberDo
	Distinct(cols ...field.Expr) ISysTeamMemberDo
	Omit(cols ...field.Expr) ISysTeamMemberDo
	Join(table schema.Tabler, on ...field.Expr) ISysTeamMemberDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysTeamMemberDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysTeamMemberDo
	Group(cols ...field.Expr) ISysTeamMemberDo
	Having(conds ...gen.Condition) ISysTeamMemberDo
	Limit(limit int) ISysTeamMemberDo
	Offset(offset int) ISysTeamMemberDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysTeamMemberDo
	Unscoped() ISysTeamMemberDo
	Create(values ...*model.SysTeamMember) error
	CreateInBatches(values []*model.SysTeamMember, batchSize int) error
	Save(values ...*model.SysTeamMember) error
	First() (*model.SysTeamMember, error)
	Take() (*model.SysTeamMember, error)
	Last() (*model.SysTeamMember, error)
	Find() ([]*model.SysTeamMember, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysTeamMember, err error)
	FindInBatches(result *[]*model.SysTeamMember, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysTeamMember) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysTeamMemberDo
	Assign(attrs ...field.AssignExpr) ISysTeamMemberDo
	Joins(fields ...field.RelationField) ISysTeamMemberDo
	Preload(fields ...field.RelationField) ISysTeamMemberDo
	FirstOrInit() (*model.SysTeamMember, error)
	FirstOrCreate() (*model.SysTeamMember, error)
	FindByPage(offset int, limit int) (result []*model.SysTeamMember, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysTeamMemberDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysTeamMemberDo) Debug() ISysTeamMemberDo {
	return s.withDO(s.DO.Debug())
}

func (s sysTeamMemberDo) WithContext(ctx context.Context) ISysTeamMemberDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysTeamMemberDo) ReadDB() ISysTeamMemberDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysTeamMemberDo) WriteDB() ISysTeamMemberDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysTeamMemberDo) Session(config *gorm.Session) ISysTeamMemberDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysTeamMemberDo) Clauses(conds ...clause.Expression) ISysTeamMemberDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysTeamMemberDo) Returning(value interface{}, columns ...string) ISysTeamMemberDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysTeamMemberDo) Not(conds ...gen.Condition) ISysTeamMemberDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysTeamMemberDo) Or(conds ...gen.Condition) ISysTeamMemberDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysTeamMemberDo) Select(conds ...field.Expr) ISysTeamMemberDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysTeamMemberDo) Where(conds ...gen.Condition) ISysTeamMemberDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysTeamMemberDo) Order(conds ...field.Expr) ISysTeamMemberDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysTeamMemberDo) Distinct(cols ...field.Expr) ISysTeamMemberDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysTeamMemberDo) Omit(cols ...field.Expr) ISysTeamMemberDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysTeamMemberDo) Join(table schema.Tabler, on ...field.Expr) ISysTeamMemberDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysTeamMemberDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysTeamMemberDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysTeamMemberDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysTeamMemberDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysTeamMemberDo) Group(cols ...field.Expr) ISysTeamMemberDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysTeamMemberDo) Having(conds ...gen.Condition) ISysTeamMemberDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysTeamMemberDo) Limit(limit int) ISysTeamMemberDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysTeamMemberDo) Offset(offset int) ISysTeamMemberDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysTeamMemberDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysTeamMemberDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysTeamMemberDo) Unscoped() ISysTeamMemberDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysTeamMemberDo) Create(values ...*model.SysTeamMember) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysTeamMemberDo) CreateInBatches(values []*model.SysTeamMember, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysTeamMemberDo) Save(values ...*model.SysTeamMember) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysTeamMemberDo) First() (*model.SysTeamMember, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTeamMember), nil
	}
}

func (s sysTeamMemberDo) Take() (*model.SysTeamMember, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTeamMember), nil
	}
}

func (s sysTeamMemberDo) Last() (*model.SysTeamMember, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTeamMember), nil
	}
}

func (s sysTeamMemberDo) Find() ([]*model.SysTeamMember, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysTeamMember), err
}

func (s sysTeamMemberDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysTeamMember, err error) {
	buf := make([]*model.SysTeamMember, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysTeamMemberDo) FindInBatches(result *[]*model.SysTeamMember, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysTeamMemberDo) Attrs(attrs ...field.AssignExpr) ISysTeamMemberDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysTeamMemberDo) Assign(attrs ...field.AssignExpr) ISysTeamMemberDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysTeamMemberDo) Joins(fields ...field.RelationField) ISysTeamMemberDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysTeamMemberDo) Preload(fields ...field.RelationField) ISysTeamMemberDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysTeamMemberDo) FirstOrInit() (*model.SysTeamMember, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTeamMember), nil
	}
}

func (s sysTeamMemberDo) FirstOrCreate() (*model.SysTeamMember, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTeamMember), nil
	}
}

func (s sysTeamMemberDo) FindByPage(offset int, limit int) (result []*model.SysTeamMember, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysTeamMemberDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysTeamMemberDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysTeamMemberDo) Delete(models ...*model.SysTeamMember) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysTeamMemberDo) withDO(do gen.Dao) *sysTeamMemberDo {
	s.DO = *do.(*gen.DO)
	return s
}
