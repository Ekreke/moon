// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                 = new(Query)
	CasbinRule        *casbinRule
	Datasource        *datasource
	SysAPI            *sysAPI
	SysTeam           *sysTeam
	SysTeamMember     *sysTeamMember
	SysTeamMemberRole *sysTeamMemberRole
	SysTeamRole       *sysTeamRole
	SysUser           *sysUser
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	CasbinRule = &Q.CasbinRule
	Datasource = &Q.Datasource
	SysAPI = &Q.SysAPI
	SysTeam = &Q.SysTeam
	SysTeamMember = &Q.SysTeamMember
	SysTeamMemberRole = &Q.SysTeamMemberRole
	SysTeamRole = &Q.SysTeamRole
	SysUser = &Q.SysUser
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                db,
		CasbinRule:        newCasbinRule(db, opts...),
		Datasource:        newDatasource(db, opts...),
		SysAPI:            newSysAPI(db, opts...),
		SysTeam:           newSysTeam(db, opts...),
		SysTeamMember:     newSysTeamMember(db, opts...),
		SysTeamMemberRole: newSysTeamMemberRole(db, opts...),
		SysTeamRole:       newSysTeamRole(db, opts...),
		SysUser:           newSysUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	CasbinRule        casbinRule
	Datasource        datasource
	SysAPI            sysAPI
	SysTeam           sysTeam
	SysTeamMember     sysTeamMember
	SysTeamMemberRole sysTeamMemberRole
	SysTeamRole       sysTeamRole
	SysUser           sysUser
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		CasbinRule:        q.CasbinRule.clone(db),
		Datasource:        q.Datasource.clone(db),
		SysAPI:            q.SysAPI.clone(db),
		SysTeam:           q.SysTeam.clone(db),
		SysTeamMember:     q.SysTeamMember.clone(db),
		SysTeamMemberRole: q.SysTeamMemberRole.clone(db),
		SysTeamRole:       q.SysTeamRole.clone(db),
		SysUser:           q.SysUser.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		CasbinRule:        q.CasbinRule.replaceDB(db),
		Datasource:        q.Datasource.replaceDB(db),
		SysAPI:            q.SysAPI.replaceDB(db),
		SysTeam:           q.SysTeam.replaceDB(db),
		SysTeamMember:     q.SysTeamMember.replaceDB(db),
		SysTeamMemberRole: q.SysTeamMemberRole.replaceDB(db),
		SysTeamRole:       q.SysTeamRole.replaceDB(db),
		SysUser:           q.SysUser.replaceDB(db),
	}
}

type queryCtx struct {
	CasbinRule        ICasbinRuleDo
	Datasource        IDatasourceDo
	SysAPI            ISysAPIDo
	SysTeam           ISysTeamDo
	SysTeamMember     ISysTeamMemberDo
	SysTeamMemberRole ISysTeamMemberRoleDo
	SysTeamRole       ISysTeamRoleDo
	SysUser           ISysUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		CasbinRule:        q.CasbinRule.WithContext(ctx),
		Datasource:        q.Datasource.WithContext(ctx),
		SysAPI:            q.SysAPI.WithContext(ctx),
		SysTeam:           q.SysTeam.WithContext(ctx),
		SysTeamMember:     q.SysTeamMember.WithContext(ctx),
		SysTeamMemberRole: q.SysTeamMemberRole.WithContext(ctx),
		SysTeamRole:       q.SysTeamRole.WithContext(ctx),
		SysUser:           q.SysUser.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
