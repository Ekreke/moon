// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"context"
	"encoding/json"
	"time"

	"gorm.io/gen"
	"gorm.io/gorm"
)

const TableNameDatasourceLabelValue = "datasource_label_values"

// DatasourceLabelValue mapped from table <datasource_label_values>
type DatasourceLabelValue struct {
	ID        uint32     `gorm:"column:id;type:int unsigned;primaryKey;autoIncrement:true" json:"id"`
	Name      string     `gorm:"column:name;type:varchar(64);not null;comment:数据源名称" json:"name"`                                   // 数据源名称
	LabelID   uint32     `gorm:"column:label_id;type:int unsigned;not null;comment:所属数据源" json:"label_id"`                          // 所属数据源
	CreatedAt *time.Time `gorm:"column:created_at;type:datetime;not null;default:CURRENT_TIMESTAMP;comment:创建时间" json:"created_at"` // 创建时间
	UpdatedAt *time.Time `gorm:"column:updated_at;type:datetime;not null;default:CURRENT_TIMESTAMP;comment:更新时间" json:"updated_at"` // 更新时间
	DeletedAt int64      `gorm:"column:deleted_at;type:bigint;not null;comment:删除时间" json:"deleted_at"`                             // 删除时间
}

// String json string
func (c *DatasourceLabelValue) String() string {
	bs, _ := json.Marshal(c)
	return string(bs)
}

func (c *DatasourceLabelValue) UnmarshalBinary(data []byte) error {
	return json.Unmarshal(data, c)
}

func (c *DatasourceLabelValue) MarshalBinary() (data []byte, err error) {
	return json.Marshal(c)
}

// Create func
func (c *DatasourceLabelValue) Create(ctx context.Context, tx *gorm.DB) error {
	return tx.WithContext(ctx).Create(c).Error
}

// Update func
func (c *DatasourceLabelValue) Update(ctx context.Context, tx *gorm.DB, conds []gen.Condition) error {
	return tx.WithContext(ctx).Model(c).Where(conds).Updates(c).Error
}

// Delete func
func (c *DatasourceLabelValue) Delete(ctx context.Context, tx *gorm.DB, conds []gen.Condition) error {
	return tx.WithContext(ctx).Where(conds).Delete(c).Error
}

// TableName DatasourceLabelValue's table name
func (*DatasourceLabelValue) TableName() string {
	return TableNameDatasourceLabelValue
}
