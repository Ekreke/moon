// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: rabbit/hook/hook.proto

package hook

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HookClient is the client API for Hook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HookClient interface {
	// 发送消息, 用于接受http数据
	SendMsg(ctx context.Context, in *SendMsgRequest, opts ...grpc.CallOption) (*SendMsgReply, error)
}

type hookClient struct {
	cc grpc.ClientConnInterface
}

func NewHookClient(cc grpc.ClientConnInterface) HookClient {
	return &hookClient{cc}
}

func (c *hookClient) SendMsg(ctx context.Context, in *SendMsgRequest, opts ...grpc.CallOption) (*SendMsgReply, error) {
	out := new(SendMsgReply)
	err := c.cc.Invoke(ctx, "/api.rabbit.hook.Hook/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HookServer is the server API for Hook service.
// All implementations must embed UnimplementedHookServer
// for forward compatibility
type HookServer interface {
	// 发送消息, 用于接受http数据
	SendMsg(context.Context, *SendMsgRequest) (*SendMsgReply, error)
	mustEmbedUnimplementedHookServer()
}

// UnimplementedHookServer must be embedded to have forward compatible implementations.
type UnimplementedHookServer struct {
}

func (UnimplementedHookServer) SendMsg(context.Context, *SendMsgRequest) (*SendMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedHookServer) mustEmbedUnimplementedHookServer() {}

// UnsafeHookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HookServer will
// result in compilation errors.
type UnsafeHookServer interface {
	mustEmbedUnimplementedHookServer()
}

func RegisterHookServer(s grpc.ServiceRegistrar, srv HookServer) {
	s.RegisterService(&Hook_ServiceDesc, srv)
}

func _Hook_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.rabbit.hook.Hook/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServer).SendMsg(ctx, req.(*SendMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hook_ServiceDesc is the grpc.ServiceDesc for Hook service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hook_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.rabbit.hook.Hook",
	HandlerType: (*HookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMsg",
			Handler:    _Hook_SendMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rabbit/hook/hook.proto",
}
