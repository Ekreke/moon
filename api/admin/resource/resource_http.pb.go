// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v3.19.4
// source: admin/resource/resource.proto

package resource

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationResourceBatchUpdateResourceStatus = "/api.admin.resource.Resource/BatchUpdateResourceStatus"
const OperationResourceGetResource = "/api.admin.resource.Resource/GetResource"
const OperationResourceGetResourceSelectList = "/api.admin.resource.Resource/GetResourceSelectList"
const OperationResourceListResource = "/api.admin.resource.Resource/ListResource"

type ResourceHTTPServer interface {
	// BatchUpdateResourceStatus 批量更新资源状态
	BatchUpdateResourceStatus(context.Context, *BatchUpdateResourceStatusRequest) (*BatchUpdateResourceStatusReply, error)
	// GetResource 获取资源详情
	GetResource(context.Context, *GetResourceRequest) (*GetResourceReply, error)
	// GetResourceSelectList 获取资源下拉列表
	GetResourceSelectList(context.Context, *GetResourceSelectListRequest) (*GetResourceSelectListReply, error)
	// ListResource 获取资源列表
	ListResource(context.Context, *ListResourceRequest) (*ListResourceReply, error)
}

func RegisterResourceHTTPServer(s *http.Server, srv ResourceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/resource/{id}", _Resource_GetResource0_HTTP_Handler(srv))
	r.POST("/v1/resource", _Resource_ListResource0_HTTP_Handler(srv))
	r.PUT("/v1/resource/status", _Resource_BatchUpdateResourceStatus0_HTTP_Handler(srv))
	r.POST("/v1/resource/select", _Resource_GetResourceSelectList0_HTTP_Handler(srv))
}

func _Resource_GetResource0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceGetResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetResource(ctx, req.(*GetResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Resource_ListResource0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceListResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListResource(ctx, req.(*ListResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Resource_BatchUpdateResourceStatus0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchUpdateResourceStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceBatchUpdateResourceStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchUpdateResourceStatus(ctx, req.(*BatchUpdateResourceStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchUpdateResourceStatusReply)
		return ctx.Result(200, reply)
	}
}

func _Resource_GetResourceSelectList0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetResourceSelectListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceGetResourceSelectList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetResourceSelectList(ctx, req.(*GetResourceSelectListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetResourceSelectListReply)
		return ctx.Result(200, reply)
	}
}

type ResourceHTTPClient interface {
	BatchUpdateResourceStatus(ctx context.Context, req *BatchUpdateResourceStatusRequest, opts ...http.CallOption) (rsp *BatchUpdateResourceStatusReply, err error)
	GetResource(ctx context.Context, req *GetResourceRequest, opts ...http.CallOption) (rsp *GetResourceReply, err error)
	GetResourceSelectList(ctx context.Context, req *GetResourceSelectListRequest, opts ...http.CallOption) (rsp *GetResourceSelectListReply, err error)
	ListResource(ctx context.Context, req *ListResourceRequest, opts ...http.CallOption) (rsp *ListResourceReply, err error)
}

type ResourceHTTPClientImpl struct {
	cc *http.Client
}

func NewResourceHTTPClient(client *http.Client) ResourceHTTPClient {
	return &ResourceHTTPClientImpl{client}
}

func (c *ResourceHTTPClientImpl) BatchUpdateResourceStatus(ctx context.Context, in *BatchUpdateResourceStatusRequest, opts ...http.CallOption) (*BatchUpdateResourceStatusReply, error) {
	var out BatchUpdateResourceStatusReply
	pattern := "/v1/resource/status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationResourceBatchUpdateResourceStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ResourceHTTPClientImpl) GetResource(ctx context.Context, in *GetResourceRequest, opts ...http.CallOption) (*GetResourceReply, error) {
	var out GetResourceReply
	pattern := "/v1/resource/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationResourceGetResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ResourceHTTPClientImpl) GetResourceSelectList(ctx context.Context, in *GetResourceSelectListRequest, opts ...http.CallOption) (*GetResourceSelectListReply, error) {
	var out GetResourceSelectListReply
	pattern := "/v1/resource/select"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationResourceGetResourceSelectList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ResourceHTTPClientImpl) ListResource(ctx context.Context, in *ListResourceRequest, opts ...http.CallOption) (*ListResourceReply, error) {
	var out ListResourceReply
	pattern := "/v1/resource"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationResourceListResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
