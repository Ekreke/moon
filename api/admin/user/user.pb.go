// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: admin/user/user.proto

package user

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	api "github.com/aide-cloud/moon/api"
	admin "github.com/aide-cloud/moon/api/admin"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户名, 只能是英文字母、数字、下划线, 长度限制在3-20个字符
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 昵称, 长度限制在0-20个字符
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	// 邮箱, 必须满足邮箱格式
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	// 手机, 必须满足手机格式
	Phone string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	// 密码
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	// 备注
	Remark string `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`
	// 头像URL
	Avatar string `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty"`
	// 状态
	Status api.Status `protobuf:"varint,8,opt,name=status,proto3,enum=api.Status" json:"status,omitempty"`
	// 性别
	Gender api.Gender `protobuf:"varint,9,opt,name=gender,proto3,enum=api.Gender" json:"gender,omitempty"`
	// 角色
	Role api.Role `protobuf:"varint,10,opt,name=role,proto3,enum=api.Role" json:"role,omitempty"`
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_user_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_user_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_admin_user_user_proto_rawDescGZIP(), []int{0}
}

func (x *CreateUserRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateUserRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *CreateUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateUserRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CreateUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateUserRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CreateUserRequest) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *CreateUserRequest) GetStatus() api.Status {
	if x != nil {
		return x.Status
	}
	return api.Status(0)
}

func (x *CreateUserRequest) GetGender() api.Gender {
	if x != nil {
		return x.Gender
	}
	return api.Gender(0)
}

func (x *CreateUserRequest) GetRole() api.Role {
	if x != nil {
		return x.Role
	}
	return api.Role(0)
}

type CreateUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateUserReply) Reset() {
	*x = CreateUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_user_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserReply) ProtoMessage() {}

func (x *CreateUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_user_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserReply.ProtoReflect.Descriptor instead.
func (*CreateUserReply) Descriptor() ([]byte, []int) {
	return file_admin_user_user_proto_rawDescGZIP(), []int{1}
}

type UpdateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 更新的数据
	Data *CreateUserRequest `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateUserRequest) Reset() {
	*x = UpdateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_user_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRequest) ProtoMessage() {}

func (x *UpdateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_user_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return file_admin_user_user_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateUserRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateUserRequest) GetData() *CreateUserRequest {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateUserReply) Reset() {
	*x = UpdateUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_user_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserReply) ProtoMessage() {}

func (x *UpdateUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_user_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserReply.ProtoReflect.Descriptor instead.
func (*UpdateUserReply) Descriptor() ([]byte, []int) {
	return file_admin_user_user_proto_rawDescGZIP(), []int{3}
}

type DeleteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteUserRequest) Reset() {
	*x = DeleteUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_user_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserRequest) ProtoMessage() {}

func (x *DeleteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_user_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserRequest) Descriptor() ([]byte, []int) {
	return file_admin_user_user_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteUserRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteUserReply) Reset() {
	*x = DeleteUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_user_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserReply) ProtoMessage() {}

func (x *DeleteUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_user_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserReply.ProtoReflect.Descriptor instead.
func (*DeleteUserReply) Descriptor() ([]byte, []int) {
	return file_admin_user_user_proto_rawDescGZIP(), []int{5}
}

type GetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_user_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_user_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_admin_user_user_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户详情
	User *admin.User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GetUserReply) Reset() {
	*x = GetUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_user_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserReply) ProtoMessage() {}

func (x *GetUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_user_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserReply.ProtoReflect.Descriptor instead.
func (*GetUserReply) Descriptor() ([]byte, []int) {
	return file_admin_user_user_proto_rawDescGZIP(), []int{7}
}

func (x *GetUserReply) GetUser() *admin.User {
	if x != nil {
		return x.User
	}
	return nil
}

type ListUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页参数
	Pagination *api.PaginationReq `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// 关键字模糊查询
	Keyword string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	// 状态查询
	Status api.Status `protobuf:"varint,3,opt,name=status,proto3,enum=api.Status" json:"status,omitempty"`
	// 性别查询
	Gender api.Gender `protobuf:"varint,4,opt,name=gender,proto3,enum=api.Gender" json:"gender,omitempty"`
	// 角色查询
	Role api.Role `protobuf:"varint,5,opt,name=role,proto3,enum=api.Role" json:"role,omitempty"`
}

func (x *ListUserRequest) Reset() {
	*x = ListUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_user_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserRequest) ProtoMessage() {}

func (x *ListUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_user_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserRequest.ProtoReflect.Descriptor instead.
func (*ListUserRequest) Descriptor() ([]byte, []int) {
	return file_admin_user_user_proto_rawDescGZIP(), []int{8}
}

func (x *ListUserRequest) GetPagination() *api.PaginationReq {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListUserRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListUserRequest) GetStatus() api.Status {
	if x != nil {
		return x.Status
	}
	return api.Status(0)
}

func (x *ListUserRequest) GetGender() api.Gender {
	if x != nil {
		return x.Gender
	}
	return api.Gender(0)
}

func (x *ListUserRequest) GetRole() api.Role {
	if x != nil {
		return x.Role
	}
	return api.Role(0)
}

type ListUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户列表
	List []*admin.User `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	// 分页信息
	Pagination *api.PaginationReply `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListUserReply) Reset() {
	*x = ListUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_user_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserReply) ProtoMessage() {}

func (x *ListUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_user_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserReply.ProtoReflect.Descriptor instead.
func (*ListUserReply) Descriptor() ([]byte, []int) {
	return file_admin_user_user_proto_rawDescGZIP(), []int{9}
}

func (x *ListUserReply) GetList() []*admin.User {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListUserReply) GetPagination() *api.PaginationReply {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type BatchUpdateUserStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id列表
	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	// 状态
	Status api.Status `protobuf:"varint,2,opt,name=status,proto3,enum=api.Status" json:"status,omitempty"`
}

func (x *BatchUpdateUserStatusRequest) Reset() {
	*x = BatchUpdateUserStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_user_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateUserStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateUserStatusRequest) ProtoMessage() {}

func (x *BatchUpdateUserStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_user_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateUserStatusRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateUserStatusRequest) Descriptor() ([]byte, []int) {
	return file_admin_user_user_proto_rawDescGZIP(), []int{10}
}

func (x *BatchUpdateUserStatusRequest) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *BatchUpdateUserStatusRequest) GetStatus() api.Status {
	if x != nil {
		return x.Status
	}
	return api.Status(0)
}

type BatchUpdateUserStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchUpdateUserStatusReply) Reset() {
	*x = BatchUpdateUserStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_user_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateUserStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateUserStatusReply) ProtoMessage() {}

func (x *BatchUpdateUserStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_user_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateUserStatusReply.ProtoReflect.Descriptor instead.
func (*BatchUpdateUserStatusReply) Descriptor() ([]byte, []int) {
	return file_admin_user_user_proto_rawDescGZIP(), []int{11}
}

// 只有系统管理员有此权限
type ResetUserPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ResetUserPasswordRequest) Reset() {
	*x = ResetUserPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_user_user_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetUserPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetUserPasswordRequest) ProtoMessage() {}

func (x *ResetUserPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_user_user_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetUserPasswordRequest.ProtoReflect.Descriptor instead.
func (*ResetUserPasswordRequest) Descriptor() ([]byte, []int) {
	return file_admin_user_user_proto_rawDescGZIP(), []int{12}
}

func (x *ResetUserPasswordRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ResetUserPasswordReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetUserPasswordReply) Reset() {
	*x = ResetUserPasswordReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_user_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetUserPasswordReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetUserPasswordReply) ProtoMessage() {}

func (x *ResetUserPasswordReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_user_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetUserPasswordReply.ProtoReflect.Descriptor instead.
func (*ResetUserPasswordReply) Descriptor() ([]byte, []int) {
	return file_admin_user_user_proto_rawDescGZIP(), []int{13}
}

type ResetUserPasswordBySelfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 旧密码
	OldPassword string `protobuf:"bytes,1,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty"`
	// 新密码
	NewPassword string `protobuf:"bytes,2,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
}

func (x *ResetUserPasswordBySelfRequest) Reset() {
	*x = ResetUserPasswordBySelfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_user_user_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetUserPasswordBySelfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetUserPasswordBySelfRequest) ProtoMessage() {}

func (x *ResetUserPasswordBySelfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_user_user_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetUserPasswordBySelfRequest.ProtoReflect.Descriptor instead.
func (*ResetUserPasswordBySelfRequest) Descriptor() ([]byte, []int) {
	return file_admin_user_user_proto_rawDescGZIP(), []int{14}
}

func (x *ResetUserPasswordBySelfRequest) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *ResetUserPasswordBySelfRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type ResetUserPasswordBySelfReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetUserPasswordBySelfReply) Reset() {
	*x = ResetUserPasswordBySelfReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_user_user_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetUserPasswordBySelfReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetUserPasswordBySelfReply) ProtoMessage() {}

func (x *ResetUserPasswordBySelfReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_user_user_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetUserPasswordBySelfReply.ProtoReflect.Descriptor instead.
func (*ResetUserPasswordBySelfReply) Descriptor() ([]byte, []int) {
	return file_admin_user_user_proto_rawDescGZIP(), []int{15}
}

type GetUserSelectListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页参数
	Pagination *api.PaginationReq `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// 关键字模糊查询
	Keyword string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	// 状态查询
	Status api.Status `protobuf:"varint,3,opt,name=status,proto3,enum=api.Status" json:"status,omitempty"`
	// 性别查询
	Gender api.Gender `protobuf:"varint,4,opt,name=gender,proto3,enum=api.Gender" json:"gender,omitempty"`
	// 角色查询
	Role api.Role `protobuf:"varint,5,opt,name=role,proto3,enum=api.Role" json:"role,omitempty"`
}

func (x *GetUserSelectListRequest) Reset() {
	*x = GetUserSelectListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_user_user_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSelectListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSelectListRequest) ProtoMessage() {}

func (x *GetUserSelectListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_user_user_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSelectListRequest.ProtoReflect.Descriptor instead.
func (*GetUserSelectListRequest) Descriptor() ([]byte, []int) {
	return file_admin_user_user_proto_rawDescGZIP(), []int{16}
}

func (x *GetUserSelectListRequest) GetPagination() *api.PaginationReq {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetUserSelectListRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *GetUserSelectListRequest) GetStatus() api.Status {
	if x != nil {
		return x.Status
	}
	return api.Status(0)
}

func (x *GetUserSelectListRequest) GetGender() api.Gender {
	if x != nil {
		return x.Gender
	}
	return api.Gender(0)
}

func (x *GetUserSelectListRequest) GetRole() api.Role {
	if x != nil {
		return x.Role
	}
	return api.Role(0)
}

type GetUserSelectListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户列表
	List []*admin.Select `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	// 分页信息
	Pagination *api.PaginationReply `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetUserSelectListReply) Reset() {
	*x = GetUserSelectListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_user_user_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSelectListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSelectListReply) ProtoMessage() {}

func (x *GetUserSelectListReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_user_user_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSelectListReply.ProtoReflect.Descriptor instead.
func (*GetUserSelectListReply) Descriptor() ([]byte, []int) {
	return file_admin_user_user_proto_rawDescGZIP(), []int{17}
}

func (x *GetUserSelectListReply) GetList() []*admin.Select {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetUserSelectListReply) GetPagination() *api.PaginationReply {
	if x != nil {
		return x.Pagination
	}
	return nil
}

var File_admin_user_user_proto protoreflect.FileDescriptor

var file_admin_user_user_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xeb, 0x09, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x95, 0x01, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x80, 0x01, 0xba, 0x48, 0x7d, 0xba, 0x01, 0x7a, 0x12, 0x51, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x90, 0x8d, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe6, 0x98,
	0xaf, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe6, 0xaf, 0x8d, 0xe3, 0x80, 0x81,
	0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe3, 0x80, 0x81, 0xe4, 0xb8, 0x8b, 0xe5, 0x88, 0x92, 0xe7,
	0xba, 0xbf, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6,
	0xe5, 0x9c, 0xa8, 0x33, 0x2d, 0x32, 0x30, 0xe4, 0xb8, 0xaa, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6,
	0x1a, 0x25, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x3e, 0x3d,
	0x20, 0x33, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28,
	0x29, 0x20, 0x3c, 0x3d, 0x20, 0x32, 0x30, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3d, 0xba, 0x48, 0x3a, 0xba, 0x01, 0x37, 0x12, 0x22, 0xe6, 0x98, 0xb5, 0xe7, 0xa7, 0xb0, 0xe9,
	0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5, 0x9c, 0xa8, 0x30, 0x2d,
	0x32, 0x30, 0xe4, 0xb8, 0xaa, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x1a, 0x11, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x32, 0x30, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x80, 0x01, 0xba, 0x48, 0x3c, 0xba, 0x01,
	0x39, 0x12, 0x27, 0xe5, 0x80, 0xbc, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe4, 0xb8, 0xba, 0xe6,
	0x9c, 0x89, 0xe6, 0x95, 0x88, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xb5, 0xe5, 0xad, 0x90, 0xe9, 0x82,
	0xae, 0xe4, 0xbb, 0xb6, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x1a, 0x0e, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x69, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x28, 0x29, 0xba, 0x48, 0x3e, 0xba, 0x01, 0x3b,
	0x12, 0x26, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99,
	0x90, 0xe5, 0x88, 0xb6, 0xe5, 0x9c, 0xa8, 0x36, 0x30, 0xe4, 0xb8, 0xaa, 0xe5, 0xad, 0x97, 0xe7,
	0xac, 0xa6, 0xe4, 0xbb, 0xa5, 0xe5, 0x86, 0x85, 0x1a, 0x11, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73,
	0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x36, 0x30, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0xe4, 0x01, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0xcd, 0x01, 0xba, 0x48, 0x88, 0x01, 0xba, 0x01, 0x84, 0x01, 0x12, 0x21, 0xe5,
	0x80, 0xbc, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe4, 0xb8, 0xba, 0xe6, 0x9c, 0x89, 0xe6, 0x95,
	0x88, 0xe7, 0x9a, 0x84, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81,
	0x1a, 0x5f, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x22,
	0x5e, 0x28, 0x31, 0x33, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x34, 0x5b, 0x30, 0x31, 0x34,
	0x35, 0x36, 0x38, 0x37, 0x39, 0x5d, 0x7c, 0x31, 0x35, 0x5b, 0x30, 0x2d, 0x33, 0x35, 0x2d, 0x39,
	0x5d, 0x7c, 0x31, 0x36, 0x5b, 0x32, 0x35, 0x36, 0x37, 0x5d, 0x7c, 0x31, 0x37, 0x5b, 0x30, 0x2d,
	0x38, 0x5d, 0x7c, 0x31, 0x38, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x39, 0x5b, 0x30, 0x2d,
	0x33, 0x35, 0x2d, 0x39, 0x5d, 0x29, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x22,
	0x29, 0xba, 0x48, 0x3e, 0xba, 0x01, 0x3b, 0x12, 0x26, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5,
	0x8f, 0xb7, 0xe7, 0xa0, 0x81, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88,
	0xb6, 0xe4, 0xb8, 0xba, 0x31, 0x31, 0xe4, 0xb8, 0xaa, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x1a,
	0x11, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x3d, 0x3d, 0x20,
	0x31, 0x31, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xba, 0x48, 0x2c,
	0xba, 0x01, 0x29, 0x12, 0x15, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe4, 0xb8, 0x8d, 0xe5, 0x85,
	0x81, 0xe8, 0xae, 0xb8, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x1a, 0x10, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x57, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0xba, 0x48, 0x3c, 0xba, 0x01, 0x39, 0x12, 0x23,
	0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5,
	0x88, 0xb6, 0xe5, 0x9c, 0xa8, 0x30, 0x2d, 0x32, 0x30, 0x30, 0xe4, 0xb8, 0xaa, 0xe5, 0xad, 0x97,
	0xe7, 0xac, 0xa6, 0x1a, 0x12, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29,
	0x20, 0x3c, 0x3d, 0x20, 0x32, 0x30, 0x30, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x5a, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x42, 0xba, 0x48, 0x3f, 0xba, 0x01, 0x3c, 0x12, 0x26, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0x55,
	0x52, 0x4c, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5, 0x9c,
	0xa8, 0x30, 0x2d, 0x32, 0x35, 0x35, 0xe4, 0xb8, 0xaa, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x1a,
	0x12, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x3c, 0x3d, 0x20,
	0x32, 0x35, 0x35, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x6d, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x48, 0xba, 0x48, 0x45, 0xba, 0x01, 0x42,
	0x12, 0x2e, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe5, 0x80, 0xbc, 0xe5, 0xbf, 0x85, 0xe9, 0xa1,
	0xbb, 0xe5, 0x9c, 0xa8, 0x5b, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x28, 0x31, 0x29, 0x2c, 0x20,
	0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0x28, 0x32, 0x29, 0x5d, 0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4,
	0x1a, 0x10, 0x28, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x31, 0x2c, 0x20, 0x32,
	0x5d, 0x29, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x67, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x42, 0xba, 0x48, 0x3f, 0xba, 0x01, 0x3c, 0x12,
	0x28, 0xe6, 0x80, 0xa7, 0xe5, 0x88, 0xab, 0xe5, 0x80, 0xbc, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb,
	0xe5, 0x9c, 0xa8, 0x5b, 0xe7, 0x94, 0xb7, 0x28, 0x31, 0x29, 0x2c, 0x20, 0xe5, 0xa5, 0xb3, 0x28,
	0x32, 0x29, 0x5d, 0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0x1a, 0x10, 0x28, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x69, 0x6e, 0x20, 0x5b, 0x31, 0x2c, 0x20, 0x32, 0x5d, 0x29, 0x52, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x87, 0x01, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x68, 0xba,
	0x48, 0x65, 0xba, 0x01, 0x62, 0x12, 0x4b, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe5, 0x80, 0xbc,
	0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe5, 0x9c, 0xa8, 0x5b, 0xe8, 0xb6, 0x85, 0xe7, 0xba, 0xa7,
	0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x91, 0x98, 0x28, 0x31, 0x29, 0x2c, 0x20, 0xe7, 0xae,
	0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x91, 0x98, 0x28, 0x32, 0x29, 0x2c, 0x20, 0xe6, 0x99, 0xae, 0xe9,
	0x80, 0x9a, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x28, 0x33, 0x29, 0x5d, 0xe4, 0xb9, 0x8b, 0xe9,
	0x97, 0xb4, 0x1a, 0x13, 0x28, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x31, 0x2c,
	0x20, 0x32, 0x2c, 0x20, 0x33, 0x5d, 0x29, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x11, 0x0a,
	0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x9a, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x36, 0xba, 0x48, 0x33, 0xba, 0x01, 0x30, 0x12, 0x24, 0xe5, 0xbf, 0x85, 0xe9,
	0xa1, 0xbb, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe8, 0xa6,
	0x81, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0x1a, 0x08, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x11, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x5b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x36, 0xba, 0x48, 0x33, 0xba, 0x01, 0x30, 0x12, 0x24, 0xe5, 0xbf, 0x85, 0xe9, 0xa1,
	0xbb, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe8, 0xa6, 0x81,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x1a,
	0x08, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x02, 0x69, 0x64, 0x22, 0x11, 0x0a,
	0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x58, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x46, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x36,
	0xba, 0x48, 0x33, 0xba, 0x01, 0x30, 0x12, 0x24, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe9, 0x80,
	0x89, 0xe6, 0x8b, 0xa9, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe8, 0xa6, 0x81, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x1a, 0x08, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x02, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22,
	0xc1, 0x04, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x66, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4c, 0xba, 0x48, 0x49, 0xba, 0x01, 0x46, 0x12, 0x31, 0xe5, 0x85, 0xb3, 0xe9, 0x94, 0xae,
	0xe5, 0xad, 0x97, 0xe6, 0xa8, 0xa1, 0xe7, 0xb3, 0x8a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9,
	0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5, 0x9c, 0xa8, 0x30, 0x2d,
	0x32, 0x30, 0xe4, 0xb8, 0xaa, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x1a, 0x11, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x32, 0x30, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x7b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x56, 0xba, 0x48, 0x53, 0xba, 0x01, 0x50, 0x12, 0x39, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xe5, 0x80, 0xbc, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe5, 0x9c, 0xa8,
	0x5b, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0x28, 0x30, 0x29, 0x2c, 0x20, 0xe5, 0x90, 0xaf, 0xe7,
	0x94, 0xa8, 0x28, 0x31, 0x29, 0x2c, 0x20, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0x28, 0x32, 0x29,
	0x5d, 0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0x1a, 0x13, 0x28, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69,
	0x6e, 0x20, 0x5b, 0x30, 0x2c, 0x20, 0x31, 0x2c, 0x20, 0x32, 0x5d, 0x29, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x75, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x42, 0x50, 0xba, 0x48, 0x4d, 0xba, 0x01, 0x4a, 0x12, 0x33, 0xe6, 0x80, 0xa7, 0xe5, 0x88,
	0xab, 0xe5, 0x80, 0xbc, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe5, 0x9c, 0xa8, 0x5b, 0xe5, 0x85,
	0xa8, 0xe9, 0x83, 0xa8, 0x28, 0x30, 0x29, 0x2c, 0x20, 0xe7, 0x94, 0xb7, 0x28, 0x31, 0x29, 0x2c,
	0x20, 0xe5, 0xa5, 0xb3, 0x28, 0x32, 0x29, 0x5d, 0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0x1a, 0x13,
	0x28, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x30, 0x2c, 0x20, 0x31, 0x2c, 0x20,
	0x32, 0x5d, 0x29, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x95, 0x01, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x76, 0xba, 0x48, 0x73, 0xba, 0x01, 0x70, 0x12, 0x56, 0xe8,
	0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe5, 0x80, 0xbc, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe5, 0x9c,
	0xa8, 0x5b, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0x28, 0x30, 0x29, 0x2c, 0x20, 0xe8, 0xb6, 0x85,
	0xe7, 0xba, 0xa7, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x91, 0x98, 0x28, 0x31, 0x29, 0x2c,
	0x20, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x91, 0x98, 0x28, 0x32, 0x29, 0x2c, 0x20, 0xe6,
	0x99, 0xae, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x28, 0x33, 0x29, 0x5d, 0xe4,
	0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0x1a, 0x16, 0x28, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20,
	0x5b, 0x30, 0x2c, 0x20, 0x31, 0x2c, 0x20, 0x32, 0x2c, 0x20, 0x33, 0x5d, 0x29, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x22, 0x6a, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x9a, 0x02, 0x0a, 0x1c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x8a, 0x01, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x78,
	0xba, 0x48, 0x3a, 0xba, 0x01, 0x37, 0x12, 0x24, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe9, 0x80,
	0x89, 0xe6, 0x8b, 0xa9, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe8, 0xa6, 0x81, 0xe6, 0x9b, 0xb4,
	0xe6, 0x96, 0xb0, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x1a, 0x0f, 0x74, 0x68,
	0x69, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x30, 0xba, 0x48, 0x38,
	0xba, 0x01, 0x35, 0x12, 0x24, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe4, 0xbf, 0x9d, 0xe8, 0xaf,
	0x81, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x1a, 0x0d, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x28, 0x29, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x6d, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x48, 0xba, 0x48, 0x45, 0xba,
	0x01, 0x42, 0x12, 0x2e, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe5, 0x80, 0xbc, 0xe5, 0xbf, 0x85,
	0xe9, 0xa1, 0xbb, 0xe5, 0x9c, 0xa8, 0x5b, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x28, 0x31, 0x29,
	0x2c, 0x20, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0x28, 0x32, 0x29, 0x5d, 0xe4, 0xb9, 0x8b, 0xe9,
	0x97, 0xb4, 0x1a, 0x10, 0x28, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x31, 0x2c,
	0x20, 0x32, 0x5d, 0x29, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1c, 0x0a, 0x1a,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x62, 0x0a, 0x18, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x36, 0xba, 0x48, 0x33, 0xba, 0x01, 0x30, 0x12, 0x24, 0xe5, 0xbf, 0x85, 0xe9,
	0xa1, 0xbb, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe8, 0xa6,
	0x81, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0x1a, 0x08, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x02, 0x69, 0x64, 0x22, 0x18,
	0x0a, 0x16, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xce, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x79,
	0x53, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0c, 0x6f,
	0x6c, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x32, 0xba, 0x48, 0x2f, 0xba, 0x01, 0x2c, 0x12, 0x18, 0xe6, 0x97, 0xa7, 0xe5, 0xaf,
	0x86, 0xe7, 0xa0, 0x81, 0xe4, 0xb8, 0x8d, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe4, 0xb8, 0xba,
	0xe7, 0xa9, 0xba, 0x1a, 0x10, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29,
	0x20, 0x21, 0x3d, 0x20, 0x30, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x55, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xba, 0x48, 0x2f, 0xba, 0x01, 0x2c,
	0x12, 0x18, 0xe6, 0x96, 0xb0, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe4, 0xb8, 0x8d, 0xe5, 0x85,
	0x81, 0xe8, 0xae, 0xb8, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x1a, 0x10, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x52, 0x0b, 0x6e, 0x65,
	0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x79,
	0x53, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xca, 0x04, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xba, 0x48, 0x49, 0xba, 0x01, 0x46, 0x12, 0x31, 0xe5, 0x85, 0xb3,
	0xe9, 0x94, 0xae, 0xe5, 0xad, 0x97, 0xe6, 0xa8, 0xa1, 0xe7, 0xb3, 0x8a, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5, 0x9c,
	0xa8, 0x30, 0x2d, 0x32, 0x30, 0xe4, 0xb8, 0xaa, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x1a, 0x11,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x32,
	0x30, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x7b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x56, 0xba, 0x48, 0x53, 0xba, 0x01, 0x50, 0x12,
	0x39, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe5, 0x80, 0xbc, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb,
	0xe5, 0x9c, 0xa8, 0x5b, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0x28, 0x30, 0x29, 0x2c, 0x20, 0xe5,
	0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x28, 0x31, 0x29, 0x2c, 0x20, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8,
	0x28, 0x32, 0x29, 0x5d, 0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0x1a, 0x13, 0x28, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x30, 0x2c, 0x20, 0x31, 0x2c, 0x20, 0x32, 0x5d, 0x29, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x75, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x42, 0x50, 0xba, 0x48, 0x4d, 0xba, 0x01, 0x4a, 0x12, 0x33, 0xe6, 0x80,
	0xa7, 0xe5, 0x88, 0xab, 0xe5, 0x80, 0xbc, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe5, 0x9c, 0xa8,
	0x5b, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0x28, 0x30, 0x29, 0x2c, 0x20, 0xe7, 0x94, 0xb7, 0x28,
	0x31, 0x29, 0x2c, 0x20, 0xe5, 0xa5, 0xb3, 0x28, 0x32, 0x29, 0x5d, 0xe4, 0xb9, 0x8b, 0xe9, 0x97,
	0xb4, 0x1a, 0x13, 0x28, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x30, 0x2c, 0x20,
	0x31, 0x2c, 0x20, 0x32, 0x5d, 0x29, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x95,
	0x01, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x76, 0xba, 0x48, 0x73, 0xba, 0x01, 0x70,
	0x12, 0x56, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe5, 0x80, 0xbc, 0xe5, 0xbf, 0x85, 0xe9, 0xa1,
	0xbb, 0xe5, 0x9c, 0xa8, 0x5b, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0x28, 0x30, 0x29, 0x2c, 0x20,
	0xe8, 0xb6, 0x85, 0xe7, 0xba, 0xa7, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x91, 0x98, 0x28,
	0x31, 0x29, 0x2c, 0x20, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x91, 0x98, 0x28, 0x32, 0x29,
	0x2c, 0x20, 0xe6, 0x99, 0xae, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x28, 0x33,
	0x29, 0x5d, 0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0x1a, 0x16, 0x28, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x69, 0x6e, 0x20, 0x5b, 0x30, 0x2c, 0x20, 0x31, 0x2c, 0x20, 0x32, 0x2c, 0x20, 0x33, 0x5d, 0x29,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x75, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xbf, 0x08,
	0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d,
	0x22, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x1a, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x67, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0f, 0x2a, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x5e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x64, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x18,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x8d, 0x01, 0x0a, 0x15, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x1a, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x83, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x1a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x9a,
	0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x53,
	0x65, 0x6c, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x53,
	0x65, 0x6c, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x1a, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x2f, 0x73, 0x65, 0x6c, 0x66, 0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x3a, 0x01, 0x2a, 0x42,
	0x42, 0x0a, 0x0e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x50, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x69, 0x64, 0x65, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x6f, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x3b, 0x75,
	0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_admin_user_user_proto_rawDescOnce sync.Once
	file_admin_user_user_proto_rawDescData = file_admin_user_user_proto_rawDesc
)

func file_admin_user_user_proto_rawDescGZIP() []byte {
	file_admin_user_user_proto_rawDescOnce.Do(func() {
		file_admin_user_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_user_user_proto_rawDescData)
	})
	return file_admin_user_user_proto_rawDescData
}

var file_admin_user_user_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_admin_user_user_proto_goTypes = []interface{}{
	(*CreateUserRequest)(nil),              // 0: api.admin.user.CreateUserRequest
	(*CreateUserReply)(nil),                // 1: api.admin.user.CreateUserReply
	(*UpdateUserRequest)(nil),              // 2: api.admin.user.UpdateUserRequest
	(*UpdateUserReply)(nil),                // 3: api.admin.user.UpdateUserReply
	(*DeleteUserRequest)(nil),              // 4: api.admin.user.DeleteUserRequest
	(*DeleteUserReply)(nil),                // 5: api.admin.user.DeleteUserReply
	(*GetUserRequest)(nil),                 // 6: api.admin.user.GetUserRequest
	(*GetUserReply)(nil),                   // 7: api.admin.user.GetUserReply
	(*ListUserRequest)(nil),                // 8: api.admin.user.ListUserRequest
	(*ListUserReply)(nil),                  // 9: api.admin.user.ListUserReply
	(*BatchUpdateUserStatusRequest)(nil),   // 10: api.admin.user.BatchUpdateUserStatusRequest
	(*BatchUpdateUserStatusReply)(nil),     // 11: api.admin.user.BatchUpdateUserStatusReply
	(*ResetUserPasswordRequest)(nil),       // 12: api.admin.user.ResetUserPasswordRequest
	(*ResetUserPasswordReply)(nil),         // 13: api.admin.user.ResetUserPasswordReply
	(*ResetUserPasswordBySelfRequest)(nil), // 14: api.admin.user.ResetUserPasswordBySelfRequest
	(*ResetUserPasswordBySelfReply)(nil),   // 15: api.admin.user.ResetUserPasswordBySelfReply
	(*GetUserSelectListRequest)(nil),       // 16: api.admin.user.GetUserSelectListRequest
	(*GetUserSelectListReply)(nil),         // 17: api.admin.user.GetUserSelectListReply
	(api.Status)(0),                        // 18: api.Status
	(api.Gender)(0),                        // 19: api.Gender
	(api.Role)(0),                          // 20: api.Role
	(*admin.User)(nil),                     // 21: api.admin.User
	(*api.PaginationReq)(nil),              // 22: api.PaginationReq
	(*api.PaginationReply)(nil),            // 23: api.PaginationReply
	(*admin.Select)(nil),                   // 24: api.admin.Select
}
var file_admin_user_user_proto_depIdxs = []int32{
	18, // 0: api.admin.user.CreateUserRequest.status:type_name -> api.Status
	19, // 1: api.admin.user.CreateUserRequest.gender:type_name -> api.Gender
	20, // 2: api.admin.user.CreateUserRequest.role:type_name -> api.Role
	0,  // 3: api.admin.user.UpdateUserRequest.data:type_name -> api.admin.user.CreateUserRequest
	21, // 4: api.admin.user.GetUserReply.user:type_name -> api.admin.User
	22, // 5: api.admin.user.ListUserRequest.pagination:type_name -> api.PaginationReq
	18, // 6: api.admin.user.ListUserRequest.status:type_name -> api.Status
	19, // 7: api.admin.user.ListUserRequest.gender:type_name -> api.Gender
	20, // 8: api.admin.user.ListUserRequest.role:type_name -> api.Role
	21, // 9: api.admin.user.ListUserReply.list:type_name -> api.admin.User
	23, // 10: api.admin.user.ListUserReply.pagination:type_name -> api.PaginationReply
	18, // 11: api.admin.user.BatchUpdateUserStatusRequest.status:type_name -> api.Status
	22, // 12: api.admin.user.GetUserSelectListRequest.pagination:type_name -> api.PaginationReq
	18, // 13: api.admin.user.GetUserSelectListRequest.status:type_name -> api.Status
	19, // 14: api.admin.user.GetUserSelectListRequest.gender:type_name -> api.Gender
	20, // 15: api.admin.user.GetUserSelectListRequest.role:type_name -> api.Role
	24, // 16: api.admin.user.GetUserSelectListReply.list:type_name -> api.admin.Select
	23, // 17: api.admin.user.GetUserSelectListReply.pagination:type_name -> api.PaginationReply
	0,  // 18: api.admin.user.User.CreateUser:input_type -> api.admin.user.CreateUserRequest
	2,  // 19: api.admin.user.User.UpdateUser:input_type -> api.admin.user.UpdateUserRequest
	4,  // 20: api.admin.user.User.DeleteUser:input_type -> api.admin.user.DeleteUserRequest
	6,  // 21: api.admin.user.User.GetUser:input_type -> api.admin.user.GetUserRequest
	8,  // 22: api.admin.user.User.ListUser:input_type -> api.admin.user.ListUserRequest
	10, // 23: api.admin.user.User.BatchUpdateUserStatus:input_type -> api.admin.user.BatchUpdateUserStatusRequest
	12, // 24: api.admin.user.User.ResetUserPassword:input_type -> api.admin.user.ResetUserPasswordRequest
	14, // 25: api.admin.user.User.ResetUserPasswordBySelf:input_type -> api.admin.user.ResetUserPasswordBySelfRequest
	16, // 26: api.admin.user.User.GetUserSelectList:input_type -> api.admin.user.GetUserSelectListRequest
	1,  // 27: api.admin.user.User.CreateUser:output_type -> api.admin.user.CreateUserReply
	3,  // 28: api.admin.user.User.UpdateUser:output_type -> api.admin.user.UpdateUserReply
	5,  // 29: api.admin.user.User.DeleteUser:output_type -> api.admin.user.DeleteUserReply
	7,  // 30: api.admin.user.User.GetUser:output_type -> api.admin.user.GetUserReply
	9,  // 31: api.admin.user.User.ListUser:output_type -> api.admin.user.ListUserReply
	11, // 32: api.admin.user.User.BatchUpdateUserStatus:output_type -> api.admin.user.BatchUpdateUserStatusReply
	13, // 33: api.admin.user.User.ResetUserPassword:output_type -> api.admin.user.ResetUserPasswordReply
	15, // 34: api.admin.user.User.ResetUserPasswordBySelf:output_type -> api.admin.user.ResetUserPasswordBySelfReply
	17, // 35: api.admin.user.User.GetUserSelectList:output_type -> api.admin.user.GetUserSelectListReply
	27, // [27:36] is the sub-list for method output_type
	18, // [18:27] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_admin_user_user_proto_init() }
func file_admin_user_user_proto_init() {
	if File_admin_user_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_admin_user_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_user_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_user_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_user_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_user_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_user_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_user_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_user_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_user_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_user_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_user_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateUserStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_user_user_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateUserStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_user_user_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetUserPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_user_user_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetUserPasswordReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_user_user_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetUserPasswordBySelfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_user_user_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetUserPasswordBySelfReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_user_user_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSelectListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_user_user_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSelectListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_user_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_admin_user_user_proto_goTypes,
		DependencyIndexes: file_admin_user_user_proto_depIdxs,
		MessageInfos:      file_admin_user_user_proto_msgTypes,
	}.Build()
	File_admin_user_user_proto = out.File
	file_admin_user_user_proto_rawDesc = nil
	file_admin_user_user_proto_goTypes = nil
	file_admin_user_user_proto_depIdxs = nil
}
