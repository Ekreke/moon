// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: admin/team/team.proto

package team

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TeamClient is the client API for Team service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamClient interface {
	// 创建团队
	CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamReply, error)
	// 更新团队
	UpdateTeam(ctx context.Context, in *UpdateTeamRequest, opts ...grpc.CallOption) (*UpdateTeamReply, error)
	// 获取团队详情
	GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamReply, error)
	// 获取团队列表
	ListTeam(ctx context.Context, in *ListTeamRequest, opts ...grpc.CallOption) (*ListTeamReply, error)
	// 修改团队状态
	UpdateTeamStatus(ctx context.Context, in *UpdateTeamStatusRequest, opts ...grpc.CallOption) (*UpdateTeamStatusReply, error)
	// 我的团队， 查看当前用户的团队列表
	MyTeam(ctx context.Context, in *MyTeamRequest, opts ...grpc.CallOption) (*MyTeamReply, error)
	// 添加团队成员
	AddTeamMember(ctx context.Context, in *AddTeamMemberRequest, opts ...grpc.CallOption) (*AddTeamMemberReply, error)
	// 移除团队成员
	RemoveTeamMember(ctx context.Context, in *RemoveTeamMemberRequest, opts ...grpc.CallOption) (*RemoveTeamMemberReply, error)
	// 设置成管理员
	SetTeamAdmin(ctx context.Context, in *SetTeamAdminRequest, opts ...grpc.CallOption) (*SetTeamAdminReply, error)
	// 移除团队管理员
	RemoveTeamAdmin(ctx context.Context, in *RemoveTeamAdminRequest, opts ...grpc.CallOption) (*RemoveTeamAdminReply, error)
	// 设置成员角色
	SetMemberRole(ctx context.Context, in *SetMemberRoleRequest, opts ...grpc.CallOption) (*SetMemberRoleReply, error)
	// 获取团队成员列表
	ListTeamMember(ctx context.Context, in *ListTeamMemberRequest, opts ...grpc.CallOption) (*ListTeamMemberReply, error)
	// 移交超级管理员
	TransferTeamLeader(ctx context.Context, in *TransferTeamLeaderRequest, opts ...grpc.CallOption) (*TransferTeamLeaderReply, error)
}

type teamClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamClient(cc grpc.ClientConnInterface) TeamClient {
	return &teamClient{cc}
}

func (c *teamClient) CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamReply, error) {
	out := new(CreateTeamReply)
	err := c.cc.Invoke(ctx, "/api.admin.team.Team/CreateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) UpdateTeam(ctx context.Context, in *UpdateTeamRequest, opts ...grpc.CallOption) (*UpdateTeamReply, error) {
	out := new(UpdateTeamReply)
	err := c.cc.Invoke(ctx, "/api.admin.team.Team/UpdateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamReply, error) {
	out := new(GetTeamReply)
	err := c.cc.Invoke(ctx, "/api.admin.team.Team/GetTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) ListTeam(ctx context.Context, in *ListTeamRequest, opts ...grpc.CallOption) (*ListTeamReply, error) {
	out := new(ListTeamReply)
	err := c.cc.Invoke(ctx, "/api.admin.team.Team/ListTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) UpdateTeamStatus(ctx context.Context, in *UpdateTeamStatusRequest, opts ...grpc.CallOption) (*UpdateTeamStatusReply, error) {
	out := new(UpdateTeamStatusReply)
	err := c.cc.Invoke(ctx, "/api.admin.team.Team/UpdateTeamStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) MyTeam(ctx context.Context, in *MyTeamRequest, opts ...grpc.CallOption) (*MyTeamReply, error) {
	out := new(MyTeamReply)
	err := c.cc.Invoke(ctx, "/api.admin.team.Team/MyTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) AddTeamMember(ctx context.Context, in *AddTeamMemberRequest, opts ...grpc.CallOption) (*AddTeamMemberReply, error) {
	out := new(AddTeamMemberReply)
	err := c.cc.Invoke(ctx, "/api.admin.team.Team/AddTeamMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) RemoveTeamMember(ctx context.Context, in *RemoveTeamMemberRequest, opts ...grpc.CallOption) (*RemoveTeamMemberReply, error) {
	out := new(RemoveTeamMemberReply)
	err := c.cc.Invoke(ctx, "/api.admin.team.Team/RemoveTeamMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) SetTeamAdmin(ctx context.Context, in *SetTeamAdminRequest, opts ...grpc.CallOption) (*SetTeamAdminReply, error) {
	out := new(SetTeamAdminReply)
	err := c.cc.Invoke(ctx, "/api.admin.team.Team/SetTeamAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) RemoveTeamAdmin(ctx context.Context, in *RemoveTeamAdminRequest, opts ...grpc.CallOption) (*RemoveTeamAdminReply, error) {
	out := new(RemoveTeamAdminReply)
	err := c.cc.Invoke(ctx, "/api.admin.team.Team/RemoveTeamAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) SetMemberRole(ctx context.Context, in *SetMemberRoleRequest, opts ...grpc.CallOption) (*SetMemberRoleReply, error) {
	out := new(SetMemberRoleReply)
	err := c.cc.Invoke(ctx, "/api.admin.team.Team/SetMemberRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) ListTeamMember(ctx context.Context, in *ListTeamMemberRequest, opts ...grpc.CallOption) (*ListTeamMemberReply, error) {
	out := new(ListTeamMemberReply)
	err := c.cc.Invoke(ctx, "/api.admin.team.Team/ListTeamMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) TransferTeamLeader(ctx context.Context, in *TransferTeamLeaderRequest, opts ...grpc.CallOption) (*TransferTeamLeaderReply, error) {
	out := new(TransferTeamLeaderReply)
	err := c.cc.Invoke(ctx, "/api.admin.team.Team/TransferTeamLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamServer is the server API for Team service.
// All implementations must embed UnimplementedTeamServer
// for forward compatibility
type TeamServer interface {
	// 创建团队
	CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamReply, error)
	// 更新团队
	UpdateTeam(context.Context, *UpdateTeamRequest) (*UpdateTeamReply, error)
	// 获取团队详情
	GetTeam(context.Context, *GetTeamRequest) (*GetTeamReply, error)
	// 获取团队列表
	ListTeam(context.Context, *ListTeamRequest) (*ListTeamReply, error)
	// 修改团队状态
	UpdateTeamStatus(context.Context, *UpdateTeamStatusRequest) (*UpdateTeamStatusReply, error)
	// 我的团队， 查看当前用户的团队列表
	MyTeam(context.Context, *MyTeamRequest) (*MyTeamReply, error)
	// 添加团队成员
	AddTeamMember(context.Context, *AddTeamMemberRequest) (*AddTeamMemberReply, error)
	// 移除团队成员
	RemoveTeamMember(context.Context, *RemoveTeamMemberRequest) (*RemoveTeamMemberReply, error)
	// 设置成管理员
	SetTeamAdmin(context.Context, *SetTeamAdminRequest) (*SetTeamAdminReply, error)
	// 移除团队管理员
	RemoveTeamAdmin(context.Context, *RemoveTeamAdminRequest) (*RemoveTeamAdminReply, error)
	// 设置成员角色
	SetMemberRole(context.Context, *SetMemberRoleRequest) (*SetMemberRoleReply, error)
	// 获取团队成员列表
	ListTeamMember(context.Context, *ListTeamMemberRequest) (*ListTeamMemberReply, error)
	// 移交超级管理员
	TransferTeamLeader(context.Context, *TransferTeamLeaderRequest) (*TransferTeamLeaderReply, error)
	mustEmbedUnimplementedTeamServer()
}

// UnimplementedTeamServer must be embedded to have forward compatible implementations.
type UnimplementedTeamServer struct {
}

func (UnimplementedTeamServer) CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (UnimplementedTeamServer) UpdateTeam(context.Context, *UpdateTeamRequest) (*UpdateTeamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (UnimplementedTeamServer) GetTeam(context.Context, *GetTeamRequest) (*GetTeamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (UnimplementedTeamServer) ListTeam(context.Context, *ListTeamRequest) (*ListTeamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeam not implemented")
}
func (UnimplementedTeamServer) UpdateTeamStatus(context.Context, *UpdateTeamStatusRequest) (*UpdateTeamStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeamStatus not implemented")
}
func (UnimplementedTeamServer) MyTeam(context.Context, *MyTeamRequest) (*MyTeamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyTeam not implemented")
}
func (UnimplementedTeamServer) AddTeamMember(context.Context, *AddTeamMemberRequest) (*AddTeamMemberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTeamMember not implemented")
}
func (UnimplementedTeamServer) RemoveTeamMember(context.Context, *RemoveTeamMemberRequest) (*RemoveTeamMemberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTeamMember not implemented")
}
func (UnimplementedTeamServer) SetTeamAdmin(context.Context, *SetTeamAdminRequest) (*SetTeamAdminReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTeamAdmin not implemented")
}
func (UnimplementedTeamServer) RemoveTeamAdmin(context.Context, *RemoveTeamAdminRequest) (*RemoveTeamAdminReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTeamAdmin not implemented")
}
func (UnimplementedTeamServer) SetMemberRole(context.Context, *SetMemberRoleRequest) (*SetMemberRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMemberRole not implemented")
}
func (UnimplementedTeamServer) ListTeamMember(context.Context, *ListTeamMemberRequest) (*ListTeamMemberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeamMember not implemented")
}
func (UnimplementedTeamServer) TransferTeamLeader(context.Context, *TransferTeamLeaderRequest) (*TransferTeamLeaderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferTeamLeader not implemented")
}
func (UnimplementedTeamServer) mustEmbedUnimplementedTeamServer() {}

// UnsafeTeamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamServer will
// result in compilation errors.
type UnsafeTeamServer interface {
	mustEmbedUnimplementedTeamServer()
}

func RegisterTeamServer(s grpc.ServiceRegistrar, srv TeamServer) {
	s.RegisterService(&Team_ServiceDesc, srv)
}

func _Team_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.team.Team/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).CreateTeam(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.team.Team/UpdateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).UpdateTeam(ctx, req.(*UpdateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.team.Team/GetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).GetTeam(ctx, req.(*GetTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_ListTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).ListTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.team.Team/ListTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).ListTeam(ctx, req.(*ListTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_UpdateTeamStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).UpdateTeamStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.team.Team/UpdateTeamStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).UpdateTeamStatus(ctx, req.(*UpdateTeamStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_MyTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).MyTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.team.Team/MyTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).MyTeam(ctx, req.(*MyTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_AddTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeamMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).AddTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.team.Team/AddTeamMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).AddTeamMember(ctx, req.(*AddTeamMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_RemoveTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeamMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).RemoveTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.team.Team/RemoveTeamMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).RemoveTeamMember(ctx, req.(*RemoveTeamMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_SetTeamAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTeamAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).SetTeamAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.team.Team/SetTeamAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).SetTeamAdmin(ctx, req.(*SetTeamAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_RemoveTeamAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeamAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).RemoveTeamAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.team.Team/RemoveTeamAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).RemoveTeamAdmin(ctx, req.(*RemoveTeamAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_SetMemberRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMemberRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).SetMemberRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.team.Team/SetMemberRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).SetMemberRole(ctx, req.(*SetMemberRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_ListTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).ListTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.team.Team/ListTeamMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).ListTeamMember(ctx, req.(*ListTeamMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_TransferTeamLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferTeamLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).TransferTeamLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.team.Team/TransferTeamLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).TransferTeamLeader(ctx, req.(*TransferTeamLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Team_ServiceDesc is the grpc.ServiceDesc for Team service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Team_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.admin.team.Team",
	HandlerType: (*TeamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTeam",
			Handler:    _Team_CreateTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _Team_UpdateTeam_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _Team_GetTeam_Handler,
		},
		{
			MethodName: "ListTeam",
			Handler:    _Team_ListTeam_Handler,
		},
		{
			MethodName: "UpdateTeamStatus",
			Handler:    _Team_UpdateTeamStatus_Handler,
		},
		{
			MethodName: "MyTeam",
			Handler:    _Team_MyTeam_Handler,
		},
		{
			MethodName: "AddTeamMember",
			Handler:    _Team_AddTeamMember_Handler,
		},
		{
			MethodName: "RemoveTeamMember",
			Handler:    _Team_RemoveTeamMember_Handler,
		},
		{
			MethodName: "SetTeamAdmin",
			Handler:    _Team_SetTeamAdmin_Handler,
		},
		{
			MethodName: "RemoveTeamAdmin",
			Handler:    _Team_RemoveTeamAdmin_Handler,
		},
		{
			MethodName: "SetMemberRole",
			Handler:    _Team_SetMemberRole_Handler,
		},
		{
			MethodName: "ListTeamMember",
			Handler:    _Team_ListTeamMember_Handler,
		},
		{
			MethodName: "TransferTeamLeader",
			Handler:    _Team_TransferTeamLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/team/team.proto",
}
