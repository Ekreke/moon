// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v3.19.4
// source: admin/strategy/strategy.proto

package strategy

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationStrategyCreateStrategy = "/api.admin.strategy.Strategy/CreateStrategy"
const OperationStrategyCreateStrategyGroup = "/api.admin.strategy.Strategy/CreateStrategyGroup"
const OperationStrategyDeleteStrategy = "/api.admin.strategy.Strategy/DeleteStrategy"
const OperationStrategyDeleteStrategyGroup = "/api.admin.strategy.Strategy/DeleteStrategyGroup"
const OperationStrategyGetStrategy = "/api.admin.strategy.Strategy/GetStrategy"
const OperationStrategyGetStrategyGroup = "/api.admin.strategy.Strategy/GetStrategyGroup"
const OperationStrategyListStrategy = "/api.admin.strategy.Strategy/ListStrategy"
const OperationStrategyListStrategyGroup = "/api.admin.strategy.Strategy/ListStrategyGroup"
const OperationStrategyUpdateStrategy = "/api.admin.strategy.Strategy/UpdateStrategy"
const OperationStrategyUpdateStrategyGroup = "/api.admin.strategy.Strategy/UpdateStrategyGroup"

type StrategyHTTPServer interface {
	// CreateStrategy 创建策略
	CreateStrategy(context.Context, *CreateStrategyRequest) (*CreateStrategyReply, error)
	// CreateStrategyGroup 创建策略组
	CreateStrategyGroup(context.Context, *CreateStrategyGroupRequest) (*CreateStrategyGroupReply, error)
	// DeleteStrategy 删除策略
	DeleteStrategy(context.Context, *DeleteStrategyRequest) (*DeleteStrategyReply, error)
	// DeleteStrategyGroup 删除策略组
	DeleteStrategyGroup(context.Context, *DeleteStrategyGroupRequest) (*DeleteStrategyGroupReply, error)
	// GetStrategy 获取策略
	GetStrategy(context.Context, *GetStrategyRequest) (*GetStrategyReply, error)
	// GetStrategyGroup 策略组详情
	GetStrategyGroup(context.Context, *GetStrategyGroupRequest) (*GetStrategyGroupReply, error)
	// ListStrategy 策略列表
	ListStrategy(context.Context, *ListStrategyRequest) (*ListStrategyReply, error)
	// ListStrategyGroup 策略组列表
	ListStrategyGroup(context.Context, *ListStrategyGroupRequest) (*ListStrategyGroupReply, error)
	// UpdateStrategy 修改策略
	UpdateStrategy(context.Context, *UpdateStrategyRequest) (*UpdateStrategyReply, error)
	// UpdateStrategyGroup 修改策略组
	UpdateStrategyGroup(context.Context, *UpdateStrategyGroupRequest) (*UpdateStrategyGroupReply, error)
}

func RegisterStrategyHTTPServer(s *http.Server, srv StrategyHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/group/strategy", _Strategy_CreateStrategyGroup0_HTTP_Handler(srv))
	r.DELETE("/v1/group/strategy/{id}", _Strategy_DeleteStrategyGroup0_HTTP_Handler(srv))
	r.POST("/v1/group/strategy/list", _Strategy_ListStrategyGroup0_HTTP_Handler(srv))
	r.GET("/v1/group/strategy/{id}", _Strategy_GetStrategyGroup0_HTTP_Handler(srv))
	r.PUT("/v1/group/strategy/{id}", _Strategy_UpdateStrategyGroup0_HTTP_Handler(srv))
	r.POST("/v1/strategy", _Strategy_CreateStrategy0_HTTP_Handler(srv))
	r.PUT("/v1/strategy/{id}", _Strategy_UpdateStrategy0_HTTP_Handler(srv))
	r.DELETE("/v1/strategy/{id}", _Strategy_DeleteStrategy0_HTTP_Handler(srv))
	r.GET("/v1/strategy/{id}", _Strategy_GetStrategy0_HTTP_Handler(srv))
	r.POST("/v1/strategy/list", _Strategy_ListStrategy0_HTTP_Handler(srv))
}

func _Strategy_CreateStrategyGroup0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateStrategyGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategyCreateStrategyGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateStrategyGroup(ctx, req.(*CreateStrategyGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateStrategyGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Strategy_DeleteStrategyGroup0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteStrategyGroupRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategyDeleteStrategyGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteStrategyGroup(ctx, req.(*DeleteStrategyGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteStrategyGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Strategy_ListStrategyGroup0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListStrategyGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategyListStrategyGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListStrategyGroup(ctx, req.(*ListStrategyGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListStrategyGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Strategy_GetStrategyGroup0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStrategyGroupRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategyGetStrategyGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStrategyGroup(ctx, req.(*GetStrategyGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetStrategyGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Strategy_UpdateStrategyGroup0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateStrategyGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategyUpdateStrategyGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateStrategyGroup(ctx, req.(*UpdateStrategyGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateStrategyGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Strategy_CreateStrategy0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateStrategyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategyCreateStrategy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateStrategy(ctx, req.(*CreateStrategyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateStrategyReply)
		return ctx.Result(200, reply)
	}
}

func _Strategy_UpdateStrategy0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateStrategyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategyUpdateStrategy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateStrategy(ctx, req.(*UpdateStrategyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateStrategyReply)
		return ctx.Result(200, reply)
	}
}

func _Strategy_DeleteStrategy0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteStrategyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategyDeleteStrategy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteStrategy(ctx, req.(*DeleteStrategyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteStrategyReply)
		return ctx.Result(200, reply)
	}
}

func _Strategy_GetStrategy0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStrategyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategyGetStrategy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStrategy(ctx, req.(*GetStrategyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetStrategyReply)
		return ctx.Result(200, reply)
	}
}

func _Strategy_ListStrategy0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListStrategyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategyListStrategy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListStrategy(ctx, req.(*ListStrategyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListStrategyReply)
		return ctx.Result(200, reply)
	}
}

type StrategyHTTPClient interface {
	CreateStrategy(ctx context.Context, req *CreateStrategyRequest, opts ...http.CallOption) (rsp *CreateStrategyReply, err error)
	CreateStrategyGroup(ctx context.Context, req *CreateStrategyGroupRequest, opts ...http.CallOption) (rsp *CreateStrategyGroupReply, err error)
	DeleteStrategy(ctx context.Context, req *DeleteStrategyRequest, opts ...http.CallOption) (rsp *DeleteStrategyReply, err error)
	DeleteStrategyGroup(ctx context.Context, req *DeleteStrategyGroupRequest, opts ...http.CallOption) (rsp *DeleteStrategyGroupReply, err error)
	GetStrategy(ctx context.Context, req *GetStrategyRequest, opts ...http.CallOption) (rsp *GetStrategyReply, err error)
	GetStrategyGroup(ctx context.Context, req *GetStrategyGroupRequest, opts ...http.CallOption) (rsp *GetStrategyGroupReply, err error)
	ListStrategy(ctx context.Context, req *ListStrategyRequest, opts ...http.CallOption) (rsp *ListStrategyReply, err error)
	ListStrategyGroup(ctx context.Context, req *ListStrategyGroupRequest, opts ...http.CallOption) (rsp *ListStrategyGroupReply, err error)
	UpdateStrategy(ctx context.Context, req *UpdateStrategyRequest, opts ...http.CallOption) (rsp *UpdateStrategyReply, err error)
	UpdateStrategyGroup(ctx context.Context, req *UpdateStrategyGroupRequest, opts ...http.CallOption) (rsp *UpdateStrategyGroupReply, err error)
}

type StrategyHTTPClientImpl struct {
	cc *http.Client
}

func NewStrategyHTTPClient(client *http.Client) StrategyHTTPClient {
	return &StrategyHTTPClientImpl{client}
}

func (c *StrategyHTTPClientImpl) CreateStrategy(ctx context.Context, in *CreateStrategyRequest, opts ...http.CallOption) (*CreateStrategyReply, error) {
	var out CreateStrategyReply
	pattern := "/v1/strategy"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStrategyCreateStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StrategyHTTPClientImpl) CreateStrategyGroup(ctx context.Context, in *CreateStrategyGroupRequest, opts ...http.CallOption) (*CreateStrategyGroupReply, error) {
	var out CreateStrategyGroupReply
	pattern := "/v1/group/strategy"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStrategyCreateStrategyGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StrategyHTTPClientImpl) DeleteStrategy(ctx context.Context, in *DeleteStrategyRequest, opts ...http.CallOption) (*DeleteStrategyReply, error) {
	var out DeleteStrategyReply
	pattern := "/v1/strategy/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStrategyDeleteStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StrategyHTTPClientImpl) DeleteStrategyGroup(ctx context.Context, in *DeleteStrategyGroupRequest, opts ...http.CallOption) (*DeleteStrategyGroupReply, error) {
	var out DeleteStrategyGroupReply
	pattern := "/v1/group/strategy/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStrategyDeleteStrategyGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StrategyHTTPClientImpl) GetStrategy(ctx context.Context, in *GetStrategyRequest, opts ...http.CallOption) (*GetStrategyReply, error) {
	var out GetStrategyReply
	pattern := "/v1/strategy/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStrategyGetStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StrategyHTTPClientImpl) GetStrategyGroup(ctx context.Context, in *GetStrategyGroupRequest, opts ...http.CallOption) (*GetStrategyGroupReply, error) {
	var out GetStrategyGroupReply
	pattern := "/v1/group/strategy/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStrategyGetStrategyGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StrategyHTTPClientImpl) ListStrategy(ctx context.Context, in *ListStrategyRequest, opts ...http.CallOption) (*ListStrategyReply, error) {
	var out ListStrategyReply
	pattern := "/v1/strategy/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStrategyListStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StrategyHTTPClientImpl) ListStrategyGroup(ctx context.Context, in *ListStrategyGroupRequest, opts ...http.CallOption) (*ListStrategyGroupReply, error) {
	var out ListStrategyGroupReply
	pattern := "/v1/group/strategy/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStrategyListStrategyGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StrategyHTTPClientImpl) UpdateStrategy(ctx context.Context, in *UpdateStrategyRequest, opts ...http.CallOption) (*UpdateStrategyReply, error) {
	var out UpdateStrategyReply
	pattern := "/v1/strategy/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStrategyUpdateStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StrategyHTTPClientImpl) UpdateStrategyGroup(ctx context.Context, in *UpdateStrategyGroupRequest, opts ...http.CallOption) (*UpdateStrategyGroupReply, error) {
	var out UpdateStrategyGroupReply
	pattern := "/v1/group/strategy/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStrategyUpdateStrategyGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
