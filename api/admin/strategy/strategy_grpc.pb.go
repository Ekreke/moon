// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: admin/strategy/strategy.proto

package strategy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Strategy_CreateStrategyGroup_FullMethodName = "/api.admin.strategy.Strategy/CreateStrategyGroup"
	Strategy_DeleteStrategyGroup_FullMethodName = "/api.admin.strategy.Strategy/DeleteStrategyGroup"
	Strategy_ListStrategyGroup_FullMethodName   = "/api.admin.strategy.Strategy/ListStrategyGroup"
	Strategy_GetStrategyGroup_FullMethodName    = "/api.admin.strategy.Strategy/GetStrategyGroup"
	Strategy_UpdateStrategyGroup_FullMethodName = "/api.admin.strategy.Strategy/UpdateStrategyGroup"
	Strategy_CreateStrategy_FullMethodName      = "/api.admin.strategy.Strategy/CreateStrategy"
	Strategy_UpdateStrategy_FullMethodName      = "/api.admin.strategy.Strategy/UpdateStrategy"
	Strategy_DeleteStrategy_FullMethodName      = "/api.admin.strategy.Strategy/DeleteStrategy"
	Strategy_GetStrategy_FullMethodName         = "/api.admin.strategy.Strategy/GetStrategy"
	Strategy_ListStrategy_FullMethodName        = "/api.admin.strategy.Strategy/ListStrategy"
)

// StrategyClient is the client API for Strategy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StrategyClient interface {
	// 创建策略组
	CreateStrategyGroup(ctx context.Context, in *CreateStrategyGroupRequest, opts ...grpc.CallOption) (*CreateStrategyGroupReply, error)
	// 删除策略组
	DeleteStrategyGroup(ctx context.Context, in *DeleteStrategyGroupRequest, opts ...grpc.CallOption) (*DeleteStrategyGroupReply, error)
	// 策略组列表
	ListStrategyGroup(ctx context.Context, in *ListStrategyGroupRequest, opts ...grpc.CallOption) (*ListStrategyGroupReply, error)
	// 策略组详情
	GetStrategyGroup(ctx context.Context, in *GetStrategyGroupRequest, opts ...grpc.CallOption) (*GetStrategyGroupReply, error)
	// 修改策略组
	UpdateStrategyGroup(ctx context.Context, in *UpdateStrategyGroupRequest, opts ...grpc.CallOption) (*UpdateStrategyGroupReply, error)
	// 创建策略
	CreateStrategy(ctx context.Context, in *CreateStrategyRequest, opts ...grpc.CallOption) (*CreateStrategyReply, error)
	// 修改策略
	UpdateStrategy(ctx context.Context, in *UpdateStrategyRequest, opts ...grpc.CallOption) (*UpdateStrategyReply, error)
	// 删除策略
	DeleteStrategy(ctx context.Context, in *DeleteStrategyRequest, opts ...grpc.CallOption) (*DeleteStrategyReply, error)
	// 获取策略
	GetStrategy(ctx context.Context, in *GetStrategyRequest, opts ...grpc.CallOption) (*GetStrategyReply, error)
	// 策略列表
	ListStrategy(ctx context.Context, in *ListStrategyRequest, opts ...grpc.CallOption) (*ListStrategyReply, error)
}

type strategyClient struct {
	cc grpc.ClientConnInterface
}

func NewStrategyClient(cc grpc.ClientConnInterface) StrategyClient {
	return &strategyClient{cc}
}

func (c *strategyClient) CreateStrategyGroup(ctx context.Context, in *CreateStrategyGroupRequest, opts ...grpc.CallOption) (*CreateStrategyGroupReply, error) {
	out := new(CreateStrategyGroupReply)
	err := c.cc.Invoke(ctx, Strategy_CreateStrategyGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyClient) DeleteStrategyGroup(ctx context.Context, in *DeleteStrategyGroupRequest, opts ...grpc.CallOption) (*DeleteStrategyGroupReply, error) {
	out := new(DeleteStrategyGroupReply)
	err := c.cc.Invoke(ctx, Strategy_DeleteStrategyGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyClient) ListStrategyGroup(ctx context.Context, in *ListStrategyGroupRequest, opts ...grpc.CallOption) (*ListStrategyGroupReply, error) {
	out := new(ListStrategyGroupReply)
	err := c.cc.Invoke(ctx, Strategy_ListStrategyGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyClient) GetStrategyGroup(ctx context.Context, in *GetStrategyGroupRequest, opts ...grpc.CallOption) (*GetStrategyGroupReply, error) {
	out := new(GetStrategyGroupReply)
	err := c.cc.Invoke(ctx, Strategy_GetStrategyGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyClient) UpdateStrategyGroup(ctx context.Context, in *UpdateStrategyGroupRequest, opts ...grpc.CallOption) (*UpdateStrategyGroupReply, error) {
	out := new(UpdateStrategyGroupReply)
	err := c.cc.Invoke(ctx, Strategy_UpdateStrategyGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyClient) CreateStrategy(ctx context.Context, in *CreateStrategyRequest, opts ...grpc.CallOption) (*CreateStrategyReply, error) {
	out := new(CreateStrategyReply)
	err := c.cc.Invoke(ctx, Strategy_CreateStrategy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyClient) UpdateStrategy(ctx context.Context, in *UpdateStrategyRequest, opts ...grpc.CallOption) (*UpdateStrategyReply, error) {
	out := new(UpdateStrategyReply)
	err := c.cc.Invoke(ctx, Strategy_UpdateStrategy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyClient) DeleteStrategy(ctx context.Context, in *DeleteStrategyRequest, opts ...grpc.CallOption) (*DeleteStrategyReply, error) {
	out := new(DeleteStrategyReply)
	err := c.cc.Invoke(ctx, Strategy_DeleteStrategy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyClient) GetStrategy(ctx context.Context, in *GetStrategyRequest, opts ...grpc.CallOption) (*GetStrategyReply, error) {
	out := new(GetStrategyReply)
	err := c.cc.Invoke(ctx, Strategy_GetStrategy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyClient) ListStrategy(ctx context.Context, in *ListStrategyRequest, opts ...grpc.CallOption) (*ListStrategyReply, error) {
	out := new(ListStrategyReply)
	err := c.cc.Invoke(ctx, Strategy_ListStrategy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StrategyServer is the server API for Strategy service.
// All implementations must embed UnimplementedStrategyServer
// for forward compatibility
type StrategyServer interface {
	// 创建策略组
	CreateStrategyGroup(context.Context, *CreateStrategyGroupRequest) (*CreateStrategyGroupReply, error)
	// 删除策略组
	DeleteStrategyGroup(context.Context, *DeleteStrategyGroupRequest) (*DeleteStrategyGroupReply, error)
	// 策略组列表
	ListStrategyGroup(context.Context, *ListStrategyGroupRequest) (*ListStrategyGroupReply, error)
	// 策略组详情
	GetStrategyGroup(context.Context, *GetStrategyGroupRequest) (*GetStrategyGroupReply, error)
	// 修改策略组
	UpdateStrategyGroup(context.Context, *UpdateStrategyGroupRequest) (*UpdateStrategyGroupReply, error)
	// 创建策略
	CreateStrategy(context.Context, *CreateStrategyRequest) (*CreateStrategyReply, error)
	// 修改策略
	UpdateStrategy(context.Context, *UpdateStrategyRequest) (*UpdateStrategyReply, error)
	// 删除策略
	DeleteStrategy(context.Context, *DeleteStrategyRequest) (*DeleteStrategyReply, error)
	// 获取策略
	GetStrategy(context.Context, *GetStrategyRequest) (*GetStrategyReply, error)
	// 策略列表
	ListStrategy(context.Context, *ListStrategyRequest) (*ListStrategyReply, error)
	mustEmbedUnimplementedStrategyServer()
}

// UnimplementedStrategyServer must be embedded to have forward compatible implementations.
type UnimplementedStrategyServer struct {
}

func (UnimplementedStrategyServer) CreateStrategyGroup(context.Context, *CreateStrategyGroupRequest) (*CreateStrategyGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStrategyGroup not implemented")
}
func (UnimplementedStrategyServer) DeleteStrategyGroup(context.Context, *DeleteStrategyGroupRequest) (*DeleteStrategyGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStrategyGroup not implemented")
}
func (UnimplementedStrategyServer) ListStrategyGroup(context.Context, *ListStrategyGroupRequest) (*ListStrategyGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStrategyGroup not implemented")
}
func (UnimplementedStrategyServer) GetStrategyGroup(context.Context, *GetStrategyGroupRequest) (*GetStrategyGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStrategyGroup not implemented")
}
func (UnimplementedStrategyServer) UpdateStrategyGroup(context.Context, *UpdateStrategyGroupRequest) (*UpdateStrategyGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStrategyGroup not implemented")
}
func (UnimplementedStrategyServer) CreateStrategy(context.Context, *CreateStrategyRequest) (*CreateStrategyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStrategy not implemented")
}
func (UnimplementedStrategyServer) UpdateStrategy(context.Context, *UpdateStrategyRequest) (*UpdateStrategyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStrategy not implemented")
}
func (UnimplementedStrategyServer) DeleteStrategy(context.Context, *DeleteStrategyRequest) (*DeleteStrategyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStrategy not implemented")
}
func (UnimplementedStrategyServer) GetStrategy(context.Context, *GetStrategyRequest) (*GetStrategyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStrategy not implemented")
}
func (UnimplementedStrategyServer) ListStrategy(context.Context, *ListStrategyRequest) (*ListStrategyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStrategy not implemented")
}
func (UnimplementedStrategyServer) mustEmbedUnimplementedStrategyServer() {}

// UnsafeStrategyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StrategyServer will
// result in compilation errors.
type UnsafeStrategyServer interface {
	mustEmbedUnimplementedStrategyServer()
}

func RegisterStrategyServer(s grpc.ServiceRegistrar, srv StrategyServer) {
	s.RegisterService(&Strategy_ServiceDesc, srv)
}

func _Strategy_CreateStrategyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStrategyGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServer).CreateStrategyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strategy_CreateStrategyGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServer).CreateStrategyGroup(ctx, req.(*CreateStrategyGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategy_DeleteStrategyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStrategyGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServer).DeleteStrategyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strategy_DeleteStrategyGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServer).DeleteStrategyGroup(ctx, req.(*DeleteStrategyGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategy_ListStrategyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStrategyGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServer).ListStrategyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strategy_ListStrategyGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServer).ListStrategyGroup(ctx, req.(*ListStrategyGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategy_GetStrategyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStrategyGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServer).GetStrategyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strategy_GetStrategyGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServer).GetStrategyGroup(ctx, req.(*GetStrategyGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategy_UpdateStrategyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStrategyGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServer).UpdateStrategyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strategy_UpdateStrategyGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServer).UpdateStrategyGroup(ctx, req.(*UpdateStrategyGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategy_CreateStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServer).CreateStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strategy_CreateStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServer).CreateStrategy(ctx, req.(*CreateStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategy_UpdateStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServer).UpdateStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strategy_UpdateStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServer).UpdateStrategy(ctx, req.(*UpdateStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategy_DeleteStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServer).DeleteStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strategy_DeleteStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServer).DeleteStrategy(ctx, req.(*DeleteStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategy_GetStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServer).GetStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strategy_GetStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServer).GetStrategy(ctx, req.(*GetStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategy_ListStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServer).ListStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strategy_ListStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServer).ListStrategy(ctx, req.(*ListStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Strategy_ServiceDesc is the grpc.ServiceDesc for Strategy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Strategy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.admin.strategy.Strategy",
	HandlerType: (*StrategyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStrategyGroup",
			Handler:    _Strategy_CreateStrategyGroup_Handler,
		},
		{
			MethodName: "DeleteStrategyGroup",
			Handler:    _Strategy_DeleteStrategyGroup_Handler,
		},
		{
			MethodName: "ListStrategyGroup",
			Handler:    _Strategy_ListStrategyGroup_Handler,
		},
		{
			MethodName: "GetStrategyGroup",
			Handler:    _Strategy_GetStrategyGroup_Handler,
		},
		{
			MethodName: "UpdateStrategyGroup",
			Handler:    _Strategy_UpdateStrategyGroup_Handler,
		},
		{
			MethodName: "CreateStrategy",
			Handler:    _Strategy_CreateStrategy_Handler,
		},
		{
			MethodName: "UpdateStrategy",
			Handler:    _Strategy_UpdateStrategy_Handler,
		},
		{
			MethodName: "DeleteStrategy",
			Handler:    _Strategy_DeleteStrategy_Handler,
		},
		{
			MethodName: "GetStrategy",
			Handler:    _Strategy_GetStrategy_Handler,
		},
		{
			MethodName: "ListStrategy",
			Handler:    _Strategy_ListStrategy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/strategy/strategy.proto",
}
