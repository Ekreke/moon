// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v3.19.4
// source: admin/datasource/metric.proto

package datasource

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMetricDeleteMetric = "/api.admin.datasource.Metric/DeleteMetric"
const OperationMetricGetMetric = "/api.admin.datasource.Metric/GetMetric"
const OperationMetricListMetric = "/api.admin.datasource.Metric/ListMetric"
const OperationMetricSelectMetric = "/api.admin.datasource.Metric/SelectMetric"
const OperationMetricUpdateMetric = "/api.admin.datasource.Metric/UpdateMetric"

type MetricHTTPServer interface {
	// DeleteMetric 删除指标（用于删除数据源中不再使用的或者错误的指标
	// 因为同步逻辑只会同步最近时间段的指标， 所以删除后需要重新同步）
	// 删除会删除该指标的所有数据， 包括标签， 标签值等
	DeleteMetric(context.Context, *DeleteMetricRequest) (*DeleteMetricReply, error)
	// GetMetric 获取元数据详情
	GetMetric(context.Context, *GetMetricRequest) (*GetMetricReply, error)
	// ListMetric 获取元数据列表
	ListMetric(context.Context, *ListMetricRequest) (*ListMetricReply, error)
	// SelectMetric 获取元数据列表（下拉选择接口）
	SelectMetric(context.Context, *SelectMetricRequest) (*SelectMetricReply, error)
	// UpdateMetric 更新元数据
	UpdateMetric(context.Context, *UpdateMetricRequest) (*UpdateMetricReply, error)
}

func RegisterMetricHTTPServer(s *http.Server, srv MetricHTTPServer) {
	r := s.Route("/")
	r.PUT("/v1/datasource/metric/{id}", _Metric_UpdateMetric0_HTTP_Handler(srv))
	r.GET("/v1/datasource/metric/{id}", _Metric_GetMetric0_HTTP_Handler(srv))
	r.POST("/v1/datasource/metric/list", _Metric_ListMetric0_HTTP_Handler(srv))
	r.POST("/v1/datasource/metric/select", _Metric_SelectMetric0_HTTP_Handler(srv))
	r.DELETE("/v1/datasource/metric/{id}", _Metric_DeleteMetric0_HTTP_Handler(srv))
}

func _Metric_UpdateMetric0_HTTP_Handler(srv MetricHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMetricRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMetricUpdateMetric)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMetric(ctx, req.(*UpdateMetricRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateMetricReply)
		return ctx.Result(200, reply)
	}
}

func _Metric_GetMetric0_HTTP_Handler(srv MetricHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMetricRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMetricGetMetric)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMetric(ctx, req.(*GetMetricRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMetricReply)
		return ctx.Result(200, reply)
	}
}

func _Metric_ListMetric0_HTTP_Handler(srv MetricHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMetricRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMetricListMetric)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMetric(ctx, req.(*ListMetricRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMetricReply)
		return ctx.Result(200, reply)
	}
}

func _Metric_SelectMetric0_HTTP_Handler(srv MetricHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SelectMetricRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMetricSelectMetric)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SelectMetric(ctx, req.(*SelectMetricRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SelectMetricReply)
		return ctx.Result(200, reply)
	}
}

func _Metric_DeleteMetric0_HTTP_Handler(srv MetricHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteMetricRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMetricDeleteMetric)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMetric(ctx, req.(*DeleteMetricRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteMetricReply)
		return ctx.Result(200, reply)
	}
}

type MetricHTTPClient interface {
	DeleteMetric(ctx context.Context, req *DeleteMetricRequest, opts ...http.CallOption) (rsp *DeleteMetricReply, err error)
	GetMetric(ctx context.Context, req *GetMetricRequest, opts ...http.CallOption) (rsp *GetMetricReply, err error)
	ListMetric(ctx context.Context, req *ListMetricRequest, opts ...http.CallOption) (rsp *ListMetricReply, err error)
	SelectMetric(ctx context.Context, req *SelectMetricRequest, opts ...http.CallOption) (rsp *SelectMetricReply, err error)
	UpdateMetric(ctx context.Context, req *UpdateMetricRequest, opts ...http.CallOption) (rsp *UpdateMetricReply, err error)
}

type MetricHTTPClientImpl struct {
	cc *http.Client
}

func NewMetricHTTPClient(client *http.Client) MetricHTTPClient {
	return &MetricHTTPClientImpl{client}
}

func (c *MetricHTTPClientImpl) DeleteMetric(ctx context.Context, in *DeleteMetricRequest, opts ...http.CallOption) (*DeleteMetricReply, error) {
	var out DeleteMetricReply
	pattern := "/v1/datasource/metric/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMetricDeleteMetric))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MetricHTTPClientImpl) GetMetric(ctx context.Context, in *GetMetricRequest, opts ...http.CallOption) (*GetMetricReply, error) {
	var out GetMetricReply
	pattern := "/v1/datasource/metric/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMetricGetMetric))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MetricHTTPClientImpl) ListMetric(ctx context.Context, in *ListMetricRequest, opts ...http.CallOption) (*ListMetricReply, error) {
	var out ListMetricReply
	pattern := "/v1/datasource/metric/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMetricListMetric))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MetricHTTPClientImpl) SelectMetric(ctx context.Context, in *SelectMetricRequest, opts ...http.CallOption) (*SelectMetricReply, error) {
	var out SelectMetricReply
	pattern := "/v1/datasource/metric/select"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMetricSelectMetric))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MetricHTTPClientImpl) UpdateMetric(ctx context.Context, in *UpdateMetricRequest, opts ...http.CallOption) (*UpdateMetricReply, error) {
	var out UpdateMetricReply
	pattern := "/v1/datasource/metric/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMetricUpdateMetric))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
