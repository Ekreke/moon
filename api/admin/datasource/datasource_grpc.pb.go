// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: admin/datasource/datasource.proto

package datasource

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Datasource_CreateDatasource_FullMethodName       = "/api.admin.datasource.Datasource/CreateDatasource"
	Datasource_UpdateDatasource_FullMethodName       = "/api.admin.datasource.Datasource/UpdateDatasource"
	Datasource_DeleteDatasource_FullMethodName       = "/api.admin.datasource.Datasource/DeleteDatasource"
	Datasource_GetDatasource_FullMethodName          = "/api.admin.datasource.Datasource/GetDatasource"
	Datasource_ListDatasource_FullMethodName         = "/api.admin.datasource.Datasource/ListDatasource"
	Datasource_UpdateDatasourceStatus_FullMethodName = "/api.admin.datasource.Datasource/UpdateDatasourceStatus"
	Datasource_GetDatasourceSelect_FullMethodName    = "/api.admin.datasource.Datasource/GetDatasourceSelect"
	Datasource_SyncDatasourceMeta_FullMethodName     = "/api.admin.datasource.Datasource/SyncDatasourceMeta"
)

// DatasourceClient is the client API for Datasource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatasourceClient interface {
	// 创建数据源
	CreateDatasource(ctx context.Context, in *CreateDatasourceRequest, opts ...grpc.CallOption) (*CreateDatasourceReply, error)
	// 更新数据源
	UpdateDatasource(ctx context.Context, in *UpdateDatasourceRequest, opts ...grpc.CallOption) (*UpdateDatasourceReply, error)
	// 删除数据源
	DeleteDatasource(ctx context.Context, in *DeleteDatasourceRequest, opts ...grpc.CallOption) (*DeleteDatasourceReply, error)
	// 获取数据源详情
	GetDatasource(ctx context.Context, in *GetDatasourceRequest, opts ...grpc.CallOption) (*GetDatasourceReply, error)
	// 获取数据源列表
	ListDatasource(ctx context.Context, in *ListDatasourceRequest, opts ...grpc.CallOption) (*ListDatasourceReply, error)
	// 更新数据源状态
	UpdateDatasourceStatus(ctx context.Context, in *UpdateDatasourceStatusRequest, opts ...grpc.CallOption) (*UpdateDatasourceStatusReply, error)
	// 下拉列表
	GetDatasourceSelect(ctx context.Context, in *GetDatasourceSelectRequest, opts ...grpc.CallOption) (*GetDatasourceSelectReply, error)
	// 同步数据源元数据
	SyncDatasourceMeta(ctx context.Context, in *SyncDatasourceMetaRequest, opts ...grpc.CallOption) (*SyncDatasourceMetaReply, error)
}

type datasourceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasourceClient(cc grpc.ClientConnInterface) DatasourceClient {
	return &datasourceClient{cc}
}

func (c *datasourceClient) CreateDatasource(ctx context.Context, in *CreateDatasourceRequest, opts ...grpc.CallOption) (*CreateDatasourceReply, error) {
	out := new(CreateDatasourceReply)
	err := c.cc.Invoke(ctx, Datasource_CreateDatasource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasourceClient) UpdateDatasource(ctx context.Context, in *UpdateDatasourceRequest, opts ...grpc.CallOption) (*UpdateDatasourceReply, error) {
	out := new(UpdateDatasourceReply)
	err := c.cc.Invoke(ctx, Datasource_UpdateDatasource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasourceClient) DeleteDatasource(ctx context.Context, in *DeleteDatasourceRequest, opts ...grpc.CallOption) (*DeleteDatasourceReply, error) {
	out := new(DeleteDatasourceReply)
	err := c.cc.Invoke(ctx, Datasource_DeleteDatasource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasourceClient) GetDatasource(ctx context.Context, in *GetDatasourceRequest, opts ...grpc.CallOption) (*GetDatasourceReply, error) {
	out := new(GetDatasourceReply)
	err := c.cc.Invoke(ctx, Datasource_GetDatasource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasourceClient) ListDatasource(ctx context.Context, in *ListDatasourceRequest, opts ...grpc.CallOption) (*ListDatasourceReply, error) {
	out := new(ListDatasourceReply)
	err := c.cc.Invoke(ctx, Datasource_ListDatasource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasourceClient) UpdateDatasourceStatus(ctx context.Context, in *UpdateDatasourceStatusRequest, opts ...grpc.CallOption) (*UpdateDatasourceStatusReply, error) {
	out := new(UpdateDatasourceStatusReply)
	err := c.cc.Invoke(ctx, Datasource_UpdateDatasourceStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasourceClient) GetDatasourceSelect(ctx context.Context, in *GetDatasourceSelectRequest, opts ...grpc.CallOption) (*GetDatasourceSelectReply, error) {
	out := new(GetDatasourceSelectReply)
	err := c.cc.Invoke(ctx, Datasource_GetDatasourceSelect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasourceClient) SyncDatasourceMeta(ctx context.Context, in *SyncDatasourceMetaRequest, opts ...grpc.CallOption) (*SyncDatasourceMetaReply, error) {
	out := new(SyncDatasourceMetaReply)
	err := c.cc.Invoke(ctx, Datasource_SyncDatasourceMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasourceServer is the server API for Datasource service.
// All implementations must embed UnimplementedDatasourceServer
// for forward compatibility
type DatasourceServer interface {
	// 创建数据源
	CreateDatasource(context.Context, *CreateDatasourceRequest) (*CreateDatasourceReply, error)
	// 更新数据源
	UpdateDatasource(context.Context, *UpdateDatasourceRequest) (*UpdateDatasourceReply, error)
	// 删除数据源
	DeleteDatasource(context.Context, *DeleteDatasourceRequest) (*DeleteDatasourceReply, error)
	// 获取数据源详情
	GetDatasource(context.Context, *GetDatasourceRequest) (*GetDatasourceReply, error)
	// 获取数据源列表
	ListDatasource(context.Context, *ListDatasourceRequest) (*ListDatasourceReply, error)
	// 更新数据源状态
	UpdateDatasourceStatus(context.Context, *UpdateDatasourceStatusRequest) (*UpdateDatasourceStatusReply, error)
	// 下拉列表
	GetDatasourceSelect(context.Context, *GetDatasourceSelectRequest) (*GetDatasourceSelectReply, error)
	// 同步数据源元数据
	SyncDatasourceMeta(context.Context, *SyncDatasourceMetaRequest) (*SyncDatasourceMetaReply, error)
	mustEmbedUnimplementedDatasourceServer()
}

// UnimplementedDatasourceServer must be embedded to have forward compatible implementations.
type UnimplementedDatasourceServer struct {
}

func (UnimplementedDatasourceServer) CreateDatasource(context.Context, *CreateDatasourceRequest) (*CreateDatasourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatasource not implemented")
}
func (UnimplementedDatasourceServer) UpdateDatasource(context.Context, *UpdateDatasourceRequest) (*UpdateDatasourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasource not implemented")
}
func (UnimplementedDatasourceServer) DeleteDatasource(context.Context, *DeleteDatasourceRequest) (*DeleteDatasourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasource not implemented")
}
func (UnimplementedDatasourceServer) GetDatasource(context.Context, *GetDatasourceRequest) (*GetDatasourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasource not implemented")
}
func (UnimplementedDatasourceServer) ListDatasource(context.Context, *ListDatasourceRequest) (*ListDatasourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatasource not implemented")
}
func (UnimplementedDatasourceServer) UpdateDatasourceStatus(context.Context, *UpdateDatasourceStatusRequest) (*UpdateDatasourceStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasourceStatus not implemented")
}
func (UnimplementedDatasourceServer) GetDatasourceSelect(context.Context, *GetDatasourceSelectRequest) (*GetDatasourceSelectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasourceSelect not implemented")
}
func (UnimplementedDatasourceServer) SyncDatasourceMeta(context.Context, *SyncDatasourceMetaRequest) (*SyncDatasourceMetaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncDatasourceMeta not implemented")
}
func (UnimplementedDatasourceServer) mustEmbedUnimplementedDatasourceServer() {}

// UnsafeDatasourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatasourceServer will
// result in compilation errors.
type UnsafeDatasourceServer interface {
	mustEmbedUnimplementedDatasourceServer()
}

func RegisterDatasourceServer(s grpc.ServiceRegistrar, srv DatasourceServer) {
	s.RegisterService(&Datasource_ServiceDesc, srv)
}

func _Datasource_CreateDatasource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasourceServer).CreateDatasource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Datasource_CreateDatasource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasourceServer).CreateDatasource(ctx, req.(*CreateDatasourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datasource_UpdateDatasource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasourceServer).UpdateDatasource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Datasource_UpdateDatasource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasourceServer).UpdateDatasource(ctx, req.(*UpdateDatasourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datasource_DeleteDatasource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasourceServer).DeleteDatasource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Datasource_DeleteDatasource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasourceServer).DeleteDatasource(ctx, req.(*DeleteDatasourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datasource_GetDatasource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasourceServer).GetDatasource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Datasource_GetDatasource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasourceServer).GetDatasource(ctx, req.(*GetDatasourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datasource_ListDatasource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasourceServer).ListDatasource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Datasource_ListDatasource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasourceServer).ListDatasource(ctx, req.(*ListDatasourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datasource_UpdateDatasourceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasourceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasourceServer).UpdateDatasourceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Datasource_UpdateDatasourceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasourceServer).UpdateDatasourceStatus(ctx, req.(*UpdateDatasourceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datasource_GetDatasourceSelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasourceSelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasourceServer).GetDatasourceSelect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Datasource_GetDatasourceSelect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasourceServer).GetDatasourceSelect(ctx, req.(*GetDatasourceSelectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datasource_SyncDatasourceMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncDatasourceMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasourceServer).SyncDatasourceMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Datasource_SyncDatasourceMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasourceServer).SyncDatasourceMeta(ctx, req.(*SyncDatasourceMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Datasource_ServiceDesc is the grpc.ServiceDesc for Datasource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Datasource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.admin.datasource.Datasource",
	HandlerType: (*DatasourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDatasource",
			Handler:    _Datasource_CreateDatasource_Handler,
		},
		{
			MethodName: "UpdateDatasource",
			Handler:    _Datasource_UpdateDatasource_Handler,
		},
		{
			MethodName: "DeleteDatasource",
			Handler:    _Datasource_DeleteDatasource_Handler,
		},
		{
			MethodName: "GetDatasource",
			Handler:    _Datasource_GetDatasource_Handler,
		},
		{
			MethodName: "ListDatasource",
			Handler:    _Datasource_ListDatasource_Handler,
		},
		{
			MethodName: "UpdateDatasourceStatus",
			Handler:    _Datasource_UpdateDatasourceStatus_Handler,
		},
		{
			MethodName: "GetDatasourceSelect",
			Handler:    _Datasource_GetDatasourceSelect_Handler,
		},
		{
			MethodName: "SyncDatasourceMeta",
			Handler:    _Datasource_SyncDatasourceMeta_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/datasource/datasource.proto",
}
