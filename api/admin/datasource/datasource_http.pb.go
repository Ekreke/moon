// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v3.19.4
// source: admin/datasource/datasource.proto

package datasource

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDatasourceCreateDatasource = "/api.admin.datasource.Datasource/CreateDatasource"
const OperationDatasourceDatasourceQuery = "/api.admin.datasource.Datasource/DatasourceQuery"
const OperationDatasourceDeleteDatasource = "/api.admin.datasource.Datasource/DeleteDatasource"
const OperationDatasourceGetDatasource = "/api.admin.datasource.Datasource/GetDatasource"
const OperationDatasourceGetDatasourceSelect = "/api.admin.datasource.Datasource/GetDatasourceSelect"
const OperationDatasourceListDatasource = "/api.admin.datasource.Datasource/ListDatasource"
const OperationDatasourceSyncDatasourceMeta = "/api.admin.datasource.Datasource/SyncDatasourceMeta"
const OperationDatasourceUpdateDatasource = "/api.admin.datasource.Datasource/UpdateDatasource"
const OperationDatasourceUpdateDatasourceStatus = "/api.admin.datasource.Datasource/UpdateDatasourceStatus"

type DatasourceHTTPServer interface {
	// CreateDatasource 创建数据源
	CreateDatasource(context.Context, *CreateDatasourceRequest) (*CreateDatasourceReply, error)
	// DatasourceQuery 获取数据
	DatasourceQuery(context.Context, *DatasourceQueryRequest) (*DatasourceQueryReply, error)
	// DeleteDatasource 删除数据源
	DeleteDatasource(context.Context, *DeleteDatasourceRequest) (*DeleteDatasourceReply, error)
	// GetDatasource 获取数据源详情
	GetDatasource(context.Context, *GetDatasourceRequest) (*GetDatasourceReply, error)
	// GetDatasourceSelect 下拉列表
	GetDatasourceSelect(context.Context, *GetDatasourceSelectRequest) (*GetDatasourceSelectReply, error)
	// ListDatasource 获取数据源列表
	ListDatasource(context.Context, *ListDatasourceRequest) (*ListDatasourceReply, error)
	// SyncDatasourceMeta 同步数据源元数据
	SyncDatasourceMeta(context.Context, *SyncDatasourceMetaRequest) (*SyncDatasourceMetaReply, error)
	// UpdateDatasource 更新数据源
	UpdateDatasource(context.Context, *UpdateDatasourceRequest) (*UpdateDatasourceReply, error)
	// UpdateDatasourceStatus 更新数据源状态
	UpdateDatasourceStatus(context.Context, *UpdateDatasourceStatusRequest) (*UpdateDatasourceStatusReply, error)
}

func RegisterDatasourceHTTPServer(s *http.Server, srv DatasourceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/datasource", _Datasource_CreateDatasource0_HTTP_Handler(srv))
	r.PUT("/v1/datasource/{id}", _Datasource_UpdateDatasource0_HTTP_Handler(srv))
	r.DELETE("/v1/datasource/{id}", _Datasource_DeleteDatasource0_HTTP_Handler(srv))
	r.GET("/v1/datasource/{id}", _Datasource_GetDatasource0_HTTP_Handler(srv))
	r.POST("/v1/datasource/list", _Datasource_ListDatasource0_HTTP_Handler(srv))
	r.PUT("/v1/datasource/{id}/status", _Datasource_UpdateDatasourceStatus0_HTTP_Handler(srv))
	r.POST("/v1/datasource/select", _Datasource_GetDatasourceSelect0_HTTP_Handler(srv))
	r.POST("/v1/datasource/{id}/sync", _Datasource_SyncDatasourceMeta0_HTTP_Handler(srv))
	r.POST("/v1/datasource/{id}/query", _Datasource_DatasourceQuery0_HTTP_Handler(srv))
}

func _Datasource_CreateDatasource0_HTTP_Handler(srv DatasourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDatasourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDatasourceCreateDatasource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDatasource(ctx, req.(*CreateDatasourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDatasourceReply)
		return ctx.Result(200, reply)
	}
}

func _Datasource_UpdateDatasource0_HTTP_Handler(srv DatasourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDatasourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDatasourceUpdateDatasource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDatasource(ctx, req.(*UpdateDatasourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDatasourceReply)
		return ctx.Result(200, reply)
	}
}

func _Datasource_DeleteDatasource0_HTTP_Handler(srv DatasourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDatasourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDatasourceDeleteDatasource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDatasource(ctx, req.(*DeleteDatasourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDatasourceReply)
		return ctx.Result(200, reply)
	}
}

func _Datasource_GetDatasource0_HTTP_Handler(srv DatasourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDatasourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDatasourceGetDatasource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDatasource(ctx, req.(*GetDatasourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDatasourceReply)
		return ctx.Result(200, reply)
	}
}

func _Datasource_ListDatasource0_HTTP_Handler(srv DatasourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDatasourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDatasourceListDatasource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDatasource(ctx, req.(*ListDatasourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDatasourceReply)
		return ctx.Result(200, reply)
	}
}

func _Datasource_UpdateDatasourceStatus0_HTTP_Handler(srv DatasourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDatasourceStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDatasourceUpdateDatasourceStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDatasourceStatus(ctx, req.(*UpdateDatasourceStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDatasourceStatusReply)
		return ctx.Result(200, reply)
	}
}

func _Datasource_GetDatasourceSelect0_HTTP_Handler(srv DatasourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDatasourceSelectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDatasourceGetDatasourceSelect)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDatasourceSelect(ctx, req.(*GetDatasourceSelectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDatasourceSelectReply)
		return ctx.Result(200, reply)
	}
}

func _Datasource_SyncDatasourceMeta0_HTTP_Handler(srv DatasourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SyncDatasourceMetaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDatasourceSyncDatasourceMeta)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SyncDatasourceMeta(ctx, req.(*SyncDatasourceMetaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SyncDatasourceMetaReply)
		return ctx.Result(200, reply)
	}
}

func _Datasource_DatasourceQuery0_HTTP_Handler(srv DatasourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DatasourceQueryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDatasourceDatasourceQuery)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DatasourceQuery(ctx, req.(*DatasourceQueryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DatasourceQueryReply)
		return ctx.Result(200, reply)
	}
}

type DatasourceHTTPClient interface {
	CreateDatasource(ctx context.Context, req *CreateDatasourceRequest, opts ...http.CallOption) (rsp *CreateDatasourceReply, err error)
	DatasourceQuery(ctx context.Context, req *DatasourceQueryRequest, opts ...http.CallOption) (rsp *DatasourceQueryReply, err error)
	DeleteDatasource(ctx context.Context, req *DeleteDatasourceRequest, opts ...http.CallOption) (rsp *DeleteDatasourceReply, err error)
	GetDatasource(ctx context.Context, req *GetDatasourceRequest, opts ...http.CallOption) (rsp *GetDatasourceReply, err error)
	GetDatasourceSelect(ctx context.Context, req *GetDatasourceSelectRequest, opts ...http.CallOption) (rsp *GetDatasourceSelectReply, err error)
	ListDatasource(ctx context.Context, req *ListDatasourceRequest, opts ...http.CallOption) (rsp *ListDatasourceReply, err error)
	SyncDatasourceMeta(ctx context.Context, req *SyncDatasourceMetaRequest, opts ...http.CallOption) (rsp *SyncDatasourceMetaReply, err error)
	UpdateDatasource(ctx context.Context, req *UpdateDatasourceRequest, opts ...http.CallOption) (rsp *UpdateDatasourceReply, err error)
	UpdateDatasourceStatus(ctx context.Context, req *UpdateDatasourceStatusRequest, opts ...http.CallOption) (rsp *UpdateDatasourceStatusReply, err error)
}

type DatasourceHTTPClientImpl struct {
	cc *http.Client
}

func NewDatasourceHTTPClient(client *http.Client) DatasourceHTTPClient {
	return &DatasourceHTTPClientImpl{client}
}

func (c *DatasourceHTTPClientImpl) CreateDatasource(ctx context.Context, in *CreateDatasourceRequest, opts ...http.CallOption) (*CreateDatasourceReply, error) {
	var out CreateDatasourceReply
	pattern := "/v1/datasource"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDatasourceCreateDatasource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DatasourceHTTPClientImpl) DatasourceQuery(ctx context.Context, in *DatasourceQueryRequest, opts ...http.CallOption) (*DatasourceQueryReply, error) {
	var out DatasourceQueryReply
	pattern := "/v1/datasource/{id}/query"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDatasourceDatasourceQuery))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DatasourceHTTPClientImpl) DeleteDatasource(ctx context.Context, in *DeleteDatasourceRequest, opts ...http.CallOption) (*DeleteDatasourceReply, error) {
	var out DeleteDatasourceReply
	pattern := "/v1/datasource/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDatasourceDeleteDatasource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DatasourceHTTPClientImpl) GetDatasource(ctx context.Context, in *GetDatasourceRequest, opts ...http.CallOption) (*GetDatasourceReply, error) {
	var out GetDatasourceReply
	pattern := "/v1/datasource/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDatasourceGetDatasource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DatasourceHTTPClientImpl) GetDatasourceSelect(ctx context.Context, in *GetDatasourceSelectRequest, opts ...http.CallOption) (*GetDatasourceSelectReply, error) {
	var out GetDatasourceSelectReply
	pattern := "/v1/datasource/select"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDatasourceGetDatasourceSelect))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DatasourceHTTPClientImpl) ListDatasource(ctx context.Context, in *ListDatasourceRequest, opts ...http.CallOption) (*ListDatasourceReply, error) {
	var out ListDatasourceReply
	pattern := "/v1/datasource/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDatasourceListDatasource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DatasourceHTTPClientImpl) SyncDatasourceMeta(ctx context.Context, in *SyncDatasourceMetaRequest, opts ...http.CallOption) (*SyncDatasourceMetaReply, error) {
	var out SyncDatasourceMetaReply
	pattern := "/v1/datasource/{id}/sync"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDatasourceSyncDatasourceMeta))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DatasourceHTTPClientImpl) UpdateDatasource(ctx context.Context, in *UpdateDatasourceRequest, opts ...http.CallOption) (*UpdateDatasourceReply, error) {
	var out UpdateDatasourceReply
	pattern := "/v1/datasource/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDatasourceUpdateDatasource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DatasourceHTTPClientImpl) UpdateDatasourceStatus(ctx context.Context, in *UpdateDatasourceStatusRequest, opts ...http.CallOption) (*UpdateDatasourceStatusReply, error) {
	var out UpdateDatasourceStatusReply
	pattern := "/v1/datasource/{id}/status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDatasourceUpdateDatasourceStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
