// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v3.19.4
// source: admin/authorization/authorization.proto

package authorization

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthorizationCaptcha = "/api.admin.authorization.Authorization/Captcha"
const OperationAuthorizationLogin = "/api.admin.authorization.Authorization/Login"
const OperationAuthorizationLogout = "/api.admin.authorization.Authorization/Logout"
const OperationAuthorizationRefreshToken = "/api.admin.authorization.Authorization/RefreshToken"

type AuthorizationHTTPServer interface {
	// Captcha 获取验证码
	Captcha(context.Context, *CaptchaReq) (*CaptchaReply, error)
	// Login 登录
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	// Logout 登出
	Logout(context.Context, *LogoutRequest) (*LogoutReply, error)
	// RefreshToken 刷新token
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenReply, error)
}

func RegisterAuthorizationHTTPServer(s *http.Server, srv AuthorizationHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/authorization/login", _Authorization_Login0_HTTP_Handler(srv))
	r.POST("/v1/authorization/logout", _Authorization_Logout0_HTTP_Handler(srv))
	r.POST("/v1/authorization/refresh", _Authorization_RefreshToken0_HTTP_Handler(srv))
	r.POST("/v1/authorization/captcha", _Authorization_Captcha0_HTTP_Handler(srv))
}

func _Authorization_Login0_HTTP_Handler(srv AuthorizationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Authorization_Logout0_HTTP_Handler(srv AuthorizationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

func _Authorization_RefreshToken0_HTTP_Handler(srv AuthorizationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RefreshTokenRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationRefreshToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RefreshToken(ctx, req.(*RefreshTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RefreshTokenReply)
		return ctx.Result(200, reply)
	}
}

func _Authorization_Captcha0_HTTP_Handler(srv AuthorizationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CaptchaReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Captcha(ctx, req.(*CaptchaReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaReply)
		return ctx.Result(200, reply)
	}
}

type AuthorizationHTTPClient interface {
	Captcha(ctx context.Context, req *CaptchaReq, opts ...http.CallOption) (rsp *CaptchaReply, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	Logout(ctx context.Context, req *LogoutRequest, opts ...http.CallOption) (rsp *LogoutReply, err error)
	RefreshToken(ctx context.Context, req *RefreshTokenRequest, opts ...http.CallOption) (rsp *RefreshTokenReply, err error)
}

type AuthorizationHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthorizationHTTPClient(client *http.Client) AuthorizationHTTPClient {
	return &AuthorizationHTTPClientImpl{client}
}

func (c *AuthorizationHTTPClientImpl) Captcha(ctx context.Context, in *CaptchaReq, opts ...http.CallOption) (*CaptchaReply, error) {
	var out CaptchaReply
	pattern := "/v1/authorization/captcha"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorizationCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthorizationHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/authorization/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorizationLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthorizationHTTPClientImpl) Logout(ctx context.Context, in *LogoutRequest, opts ...http.CallOption) (*LogoutReply, error) {
	var out LogoutReply
	pattern := "/v1/authorization/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorizationLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthorizationHTTPClientImpl) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...http.CallOption) (*RefreshTokenReply, error) {
	var out RefreshTokenReply
	pattern := "/v1/authorization/refresh"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorizationRefreshToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
