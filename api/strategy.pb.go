// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: strategy.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 持续类型定义
//
//	m时间内出现n次
//	m时间内最多出现n次
//	m时间内最少出现n次
type SustainType int32

const (
	// 持续类型定义
	SustainType_MetricSustainType_UNKNOWN SustainType = 0
	// m时间内出现n次
	SustainType_MetricSustainType_FOR SustainType = 1
	// m时间内最多出现n次
	SustainType_MetricSustainType_MAX SustainType = 2
	// m时间内最少出现n次
	SustainType_MetricSustainType_MIN SustainType = 3
)

// Enum value maps for SustainType.
var (
	SustainType_name = map[int32]string{
		0: "MetricSustainType_UNKNOWN",
		1: "MetricSustainType_FOR",
		2: "MetricSustainType_MAX",
		3: "MetricSustainType_MIN",
	}
	SustainType_value = map[string]int32{
		"MetricSustainType_UNKNOWN": 0,
		"MetricSustainType_FOR":     1,
		"MetricSustainType_MAX":     2,
		"MetricSustainType_MIN":     3,
	}
)

func (x SustainType) Enum() *SustainType {
	p := new(SustainType)
	*p = x
	return p
}

func (x SustainType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SustainType) Descriptor() protoreflect.EnumDescriptor {
	return file_strategy_proto_enumTypes[0].Descriptor()
}

func (SustainType) Type() protoreflect.EnumType {
	return &file_strategy_proto_enumTypes[0]
}

func (x SustainType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SustainType.Descriptor instead.
func (SustainType) EnumDescriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{0}
}

// 消息过滤器类型
type MessageFilterType int32

const (
	// 符合规则消息过滤
	MessageFilterType_MessageFilter_FILTER MessageFilterType = 0
	// 符合规则消息通过
	MessageFilterType_MessageFilter_PASS MessageFilterType = 1
)

// Enum value maps for MessageFilterType.
var (
	MessageFilterType_name = map[int32]string{
		0: "MessageFilter_FILTER",
		1: "MessageFilter_PASS",
	}
	MessageFilterType_value = map[string]int32{
		"MessageFilter_FILTER": 0,
		"MessageFilter_PASS":   1,
	}
)

func (x MessageFilterType) Enum() *MessageFilterType {
	p := new(MessageFilterType)
	*p = x
	return p
}

func (x MessageFilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageFilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_strategy_proto_enumTypes[1].Descriptor()
}

func (MessageFilterType) Type() protoreflect.EnumType {
	return &file_strategy_proto_enumTypes[1]
}

func (x MessageFilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageFilterType.Descriptor instead.
func (MessageFilterType) EnumDescriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{1}
}

// 消息规则匹配类型
// 假设:规则为a,消息为b
type MessageMatchType int32

const (
	// 规则与消息进行全匹配,即a=b
	MessageMatchType_MessageMatchType_EQ MessageMatchType = 0
	// 规则包含消息全部标签,即a>=b
	MessageMatchType_MessageMatchType_IN MessageMatchType = 1
	// 消息包含规则全部标签,即b>=a
	MessageMatchType_MessageMatchType_CONTAIN MessageMatchType = 2
	// 规则与消息有任意标签匹配
	// exp:
	// a:[1,2,3]&b:[2,3,4]=true
	// a:[1,2,3]&b:[4,5,6]=false
	MessageMatchType_MessageMatchType_ANY MessageMatchType = 3
)

// Enum value maps for MessageMatchType.
var (
	MessageMatchType_name = map[int32]string{
		0: "MessageMatchType_EQ",
		1: "MessageMatchType_IN",
		2: "MessageMatchType_CONTAIN",
		3: "MessageMatchType_ANY",
	}
	MessageMatchType_value = map[string]int32{
		"MessageMatchType_EQ":      0,
		"MessageMatchType_IN":      1,
		"MessageMatchType_CONTAIN": 2,
		"MessageMatchType_ANY":     3,
	}
)

func (x MessageMatchType) Enum() *MessageMatchType {
	p := new(MessageMatchType)
	*p = x
	return p
}

func (x MessageMatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageMatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_strategy_proto_enumTypes[2].Descriptor()
}

func (MessageMatchType) Type() protoreflect.EnumType {
	return &file_strategy_proto_enumTypes[2]
}

func (x MessageMatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageMatchType.Descriptor instead.
func (MessageMatchType) EnumDescriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{2}
}

type Strategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 策略名称
	Alert string `protobuf:"bytes,1,opt,name=alert,proto3" json:"alert,omitempty"`
	// 策略语句
	Expr string `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
	// 策略持续时间
	For *durationpb.Duration `protobuf:"bytes,3,opt,name=for,proto3" json:"for,omitempty"`
	// 持续次数
	Count uint32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// 持续的类型
	SustainType SustainType `protobuf:"varint,5,opt,name=sustainType,proto3,enum=api.SustainType" json:"sustainType,omitempty"`
	// 策略标签
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 策略注解
	Annotations map[string]string `protobuf:"bytes,7,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 执行频率
	Interval *durationpb.Duration `protobuf:"bytes,8,opt,name=interval,proto3" json:"interval,omitempty"`
	// 数据源
	Datasource []*Datasource `protobuf:"bytes,9,rep,name=datasource,proto3" json:"datasource,omitempty"`
}

func (x *Strategy) Reset() {
	*x = Strategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Strategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Strategy) ProtoMessage() {}

func (x *Strategy) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Strategy.ProtoReflect.Descriptor instead.
func (*Strategy) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{0}
}

func (x *Strategy) GetAlert() string {
	if x != nil {
		return x.Alert
	}
	return ""
}

func (x *Strategy) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *Strategy) GetFor() *durationpb.Duration {
	if x != nil {
		return x.For
	}
	return nil
}

func (x *Strategy) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Strategy) GetSustainType() SustainType {
	if x != nil {
		return x.SustainType
	}
	return SustainType_MetricSustainType_UNKNOWN
}

func (x *Strategy) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Strategy) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Strategy) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Strategy) GetDatasource() []*Datasource {
	if x != nil {
		return x.Datasource
	}
	return nil
}

// 类型元数据，每个对象都应该包含这个字段
// 表示这个对象的数据类型
type TypeMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *TypeMeta) Reset() {
	*x = TypeMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeMeta) ProtoMessage() {}

func (x *TypeMeta) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeMeta.ProtoReflect.Descriptor instead.
func (*TypeMeta) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{1}
}

func (x *TypeMeta) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

// 对象元数据，每个对象都应该包含这个字段
// 相同类型数据的对象的唯一标识
type ObjectMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ObjectMeta) Reset() {
	*x = ObjectMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectMeta) ProtoMessage() {}

func (x *ObjectMeta) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectMeta.ProtoReflect.Descriptor instead.
func (*ObjectMeta) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{2}
}

func (x *ObjectMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FilterRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 消息过滤器类型
	FilterType MessageFilterType `protobuf:"varint,1,opt,name=filterType,proto3,enum=api.MessageFilterType" json:"filterType,omitempty"`
	// 消息匹配类型
	MatchType MessageMatchType `protobuf:"varint,2,opt,name=matchType,proto3,enum=api.MessageMatchType" json:"matchType,omitempty"`
	// 需要匹配的标签
	MatchLabel []string `protobuf:"bytes,3,rep,name=matchLabel,proto3" json:"matchLabel,omitempty"`
	// 扩展配置，可以用于存放一下特殊配置
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FilterRule) Reset() {
	*x = FilterRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterRule) ProtoMessage() {}

func (x *FilterRule) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterRule.ProtoReflect.Descriptor instead.
func (*FilterRule) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{3}
}

func (x *FilterRule) GetFilterType() MessageFilterType {
	if x != nil {
		return x.FilterType
	}
	return MessageFilterType_MessageFilter_FILTER
}

func (x *FilterRule) GetMatchType() MessageMatchType {
	if x != nil {
		return x.MatchType
	}
	return MessageMatchType_MessageMatchType_EQ
}

func (x *FilterRule) GetMatchLabel() []string {
	if x != nil {
		return x.MatchLabel
	}
	return nil
}

func (x *FilterRule) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// 消息过滤规则
type MessageFilterRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 类型
	*TypeMeta `protobuf:"bytes,1,opt,name=typeMeta,proto3" json:",inline"`
	// 规则名称
	*ObjectMeta `protobuf:"bytes,2,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	// 使用的过滤器名称
	Use string `protobuf:"bytes,3,opt,name=use,proto3" json:"use,omitempty"`
	// 过滤规则
	Rule *FilterRule `protobuf:"bytes,4,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *MessageFilterRule) Reset() {
	*x = MessageFilterRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageFilterRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageFilterRule) ProtoMessage() {}

func (x *MessageFilterRule) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageFilterRule.ProtoReflect.Descriptor instead.
func (*MessageFilterRule) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{4}
}

func (x *MessageFilterRule) GetTypeMeta() *TypeMeta {
	if x != nil {
		return x.TypeMeta
	}
	return nil
}

func (x *MessageFilterRule) GetObjectMeta() *ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *MessageFilterRule) GetUse() string {
	if x != nil {
		return x.Use
	}
	return ""
}

func (x *MessageFilterRule) GetRule() *FilterRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type AggregationRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 聚合时,每个包中，至多包含的消息数量
	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// 发送消息的最大间隔，
	Interval *durationpb.Duration `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
	// 消息聚合时用于聚合的字段
	GroupBy string `protobuf:"bytes,3,opt,name=groupBy,proto3" json:"groupBy,omitempty"`
}

func (x *AggregationRule) Reset() {
	*x = AggregationRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregationRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationRule) ProtoMessage() {}

func (x *AggregationRule) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationRule.ProtoReflect.Descriptor instead.
func (*AggregationRule) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{5}
}

func (x *AggregationRule) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AggregationRule) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AggregationRule) GetGroupBy() string {
	if x != nil {
		return x.GroupBy
	}
	return ""
}

// 消息聚合规则
type MessageAggregationRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 类型
	*TypeMeta `protobuf:"bytes,1,opt,name=typeMeta,proto3" json:",inline"`
	// 规则名称
	*ObjectMeta `protobuf:"bytes,2,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	// 使用的聚合器名称
	Use string `protobuf:"bytes,3,opt,name=use,proto3" json:"use,omitempty"`
	// 聚合规则
	Rule *AggregationRule `protobuf:"bytes,4,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *MessageAggregationRule) Reset() {
	*x = MessageAggregationRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageAggregationRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageAggregationRule) ProtoMessage() {}

func (x *MessageAggregationRule) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageAggregationRule.ProtoReflect.Descriptor instead.
func (*MessageAggregationRule) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{6}
}

func (x *MessageAggregationRule) GetTypeMeta() *TypeMeta {
	if x != nil {
		return x.TypeMeta
	}
	return nil
}

func (x *MessageAggregationRule) GetObjectMeta() *ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *MessageAggregationRule) GetUse() string {
	if x != nil {
		return x.Use
	}
	return ""
}

func (x *MessageAggregationRule) GetRule() *AggregationRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

// 消息模版规则
type SendRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 扩展配置，用于存放sender需要的密钥
	Config map[string]string `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SendRule) Reset() {
	*x = SendRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRule) ProtoMessage() {}

func (x *SendRule) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRule.ProtoReflect.Descriptor instead.
func (*SendRule) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{7}
}

func (x *SendRule) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

// 消息发送规则
type MessageSendRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 类型
	*TypeMeta `protobuf:"bytes,1,opt,name=typeMeta,proto3" json:",inline"`
	// 规则名称
	*ObjectMeta `protobuf:"bytes,2,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	// 发送者名称
	Use string `protobuf:"bytes,3,opt,name=use,proto3" json:"use,omitempty"`
	// 发送规则
	Rule *SendRule `protobuf:"bytes,4,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *MessageSendRule) Reset() {
	*x = MessageSendRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSendRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSendRule) ProtoMessage() {}

func (x *MessageSendRule) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSendRule.ProtoReflect.Descriptor instead.
func (*MessageSendRule) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{8}
}

func (x *MessageSendRule) GetTypeMeta() *TypeMeta {
	if x != nil {
		return x.TypeMeta
	}
	return nil
}

func (x *MessageSendRule) GetObjectMeta() *ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *MessageSendRule) GetUse() string {
	if x != nil {
		return x.Use
	}
	return ""
}

func (x *MessageSendRule) GetRule() *SendRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

// 消息模版规则
type TemplateRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 模版
	Template string `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *TemplateRule) Reset() {
	*x = TemplateRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateRule) ProtoMessage() {}

func (x *TemplateRule) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateRule.ProtoReflect.Descriptor instead.
func (*TemplateRule) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{9}
}

func (x *TemplateRule) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

// 消息模版规则
type MessageTemplateRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 类型
	*TypeMeta `protobuf:"bytes,1,opt,name=typeMeta,proto3" json:",inline"`
	// 规则名称
	*ObjectMeta `protobuf:"bytes,2,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	// 使用的模板解析器名称
	Use string `protobuf:"bytes,3,opt,name=use,proto3" json:"use,omitempty"`
	// 模板解析规则
	Rule *TemplateRule `protobuf:"bytes,4,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *MessageTemplateRule) Reset() {
	*x = MessageTemplateRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageTemplateRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageTemplateRule) ProtoMessage() {}

func (x *MessageTemplateRule) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageTemplateRule.ProtoReflect.Descriptor instead.
func (*MessageTemplateRule) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{10}
}

func (x *MessageTemplateRule) GetTypeMeta() *TypeMeta {
	if x != nil {
		return x.TypeMeta
	}
	return nil
}

func (x *MessageTemplateRule) GetObjectMeta() *ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *MessageTemplateRule) GetUse() string {
	if x != nil {
		return x.Use
	}
	return ""
}

func (x *MessageTemplateRule) GetRule() *TemplateRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

// 规则组
type RuleGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 类型
	*TypeMeta `protobuf:"bytes,1,opt,name=typeMeta,proto3" json:",inline"`
	// 规则名称
	*ObjectMeta `protobuf:"bytes,2,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	// 消息过滤规则名称
	FilterRuleName string `protobuf:"bytes,3,opt,name=filterRuleName,proto3" json:"filterRuleName,omitempty"`
	// 消息聚合规则
	AggregationRuleName string `protobuf:"bytes,4,opt,name=aggregationRuleName,proto3" json:"aggregationRuleName,omitempty"`
	// 模版规则名称
	TemplateRuleName string `protobuf:"bytes,5,opt,name=templateRuleName,proto3" json:"templateRuleName,omitempty"`
	// 发送规则名称
	SendRuleName string `protobuf:"bytes,6,opt,name=sendRuleName,proto3" json:"sendRuleName,omitempty"`
}

func (x *RuleGroup) Reset() {
	*x = RuleGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleGroup) ProtoMessage() {}

func (x *RuleGroup) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleGroup.ProtoReflect.Descriptor instead.
func (*RuleGroup) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{11}
}

func (x *RuleGroup) GetTypeMeta() *TypeMeta {
	if x != nil {
		return x.TypeMeta
	}
	return nil
}

func (x *RuleGroup) GetObjectMeta() *ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *RuleGroup) GetFilterRuleName() string {
	if x != nil {
		return x.FilterRuleName
	}
	return ""
}

func (x *RuleGroup) GetAggregationRuleName() string {
	if x != nil {
		return x.AggregationRuleName
	}
	return ""
}

func (x *RuleGroup) GetTemplateRuleName() string {
	if x != nil {
		return x.TemplateRuleName
	}
	return ""
}

func (x *RuleGroup) GetSendRuleName() string {
	if x != nil {
		return x.SendRuleName
	}
	return ""
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 消息ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 消息标签
	Labels []string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	// 使用的规则组名称
	UseGroups []string `protobuf:"bytes,3,rep,name=useGroups,proto3" json:"useGroups,omitempty"`
	// 消息内容
	Content map[string]*anypb.Any `protobuf:"bytes,4,rep,name=content,proto3" json:"content,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{12}
}

func (x *Message) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Message) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Message) GetUseGroups() []string {
	if x != nil {
		return x.UseGroups
	}
	return nil
}

func (x *Message) GetContent() map[string]*anypb.Any {
	if x != nil {
		return x.Content
	}
	return nil
}

var File_strategy_proto protoreflect.FileDescriptor

var file_strategy_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x83, 0x04, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x2b, 0x0a, 0x03, 0x66, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x03, 0x66, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0b,
	0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1e, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x20, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x0a, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x33, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xa6, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x78, 0x0a, 0x0f, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x22, 0xb0, 0x01, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x29, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x0a, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x78, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x2f, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x2a, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x72, 0x75, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x22, 0x91, 0x02, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x29,
	0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x50, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x7d, 0x0a,
	0x0b, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x46, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x41, 0x58, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x75, 0x73, 0x74, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x03, 0x2a, 0x45, 0x0a, 0x11,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x50, 0x41, 0x53,
	0x53, 0x10, 0x01, 0x2a, 0x7c, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x51, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x4e, 0x59, 0x10,
	0x03, 0x42, 0x2c, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x50, 0x01, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x69, 0x64, 0x65, 0x2d, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x2f, 0x6d, 0x6f, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x61, 0x70, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_strategy_proto_rawDescOnce sync.Once
	file_strategy_proto_rawDescData = file_strategy_proto_rawDesc
)

func file_strategy_proto_rawDescGZIP() []byte {
	file_strategy_proto_rawDescOnce.Do(func() {
		file_strategy_proto_rawDescData = protoimpl.X.CompressGZIP(file_strategy_proto_rawDescData)
	})
	return file_strategy_proto_rawDescData
}

var file_strategy_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_strategy_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_strategy_proto_goTypes = []any{
	(SustainType)(0),               // 0: api.SustainType
	(MessageFilterType)(0),         // 1: api.MessageFilterType
	(MessageMatchType)(0),          // 2: api.MessageMatchType
	(*Strategy)(nil),               // 3: api.Strategy
	(*TypeMeta)(nil),               // 4: api.TypeMeta
	(*ObjectMeta)(nil),             // 5: api.ObjectMeta
	(*FilterRule)(nil),             // 6: api.FilterRule
	(*MessageFilterRule)(nil),      // 7: api.MessageFilterRule
	(*AggregationRule)(nil),        // 8: api.AggregationRule
	(*MessageAggregationRule)(nil), // 9: api.MessageAggregationRule
	(*SendRule)(nil),               // 10: api.SendRule
	(*MessageSendRule)(nil),        // 11: api.MessageSendRule
	(*TemplateRule)(nil),           // 12: api.TemplateRule
	(*MessageTemplateRule)(nil),    // 13: api.MessageTemplateRule
	(*RuleGroup)(nil),              // 14: api.RuleGroup
	(*Message)(nil),                // 15: api.Message
	nil,                            // 16: api.Strategy.LabelsEntry
	nil,                            // 17: api.Strategy.AnnotationsEntry
	nil,                            // 18: api.FilterRule.ExtraEntry
	nil,                            // 19: api.SendRule.ConfigEntry
	nil,                            // 20: api.Message.ContentEntry
	(*durationpb.Duration)(nil),    // 21: google.protobuf.Duration
	(*Datasource)(nil),             // 22: api.Datasource
	(*anypb.Any)(nil),              // 23: google.protobuf.Any
}
var file_strategy_proto_depIdxs = []int32{
	21, // 0: api.Strategy.for:type_name -> google.protobuf.Duration
	0,  // 1: api.Strategy.sustainType:type_name -> api.SustainType
	16, // 2: api.Strategy.labels:type_name -> api.Strategy.LabelsEntry
	17, // 3: api.Strategy.annotations:type_name -> api.Strategy.AnnotationsEntry
	21, // 4: api.Strategy.interval:type_name -> google.protobuf.Duration
	22, // 5: api.Strategy.datasource:type_name -> api.Datasource
	1,  // 6: api.FilterRule.filterType:type_name -> api.MessageFilterType
	2,  // 7: api.FilterRule.matchType:type_name -> api.MessageMatchType
	18, // 8: api.FilterRule.extra:type_name -> api.FilterRule.ExtraEntry
	4,  // 9: api.MessageFilterRule.typeMeta:type_name -> api.TypeMeta
	5,  // 10: api.MessageFilterRule.objectMeta:type_name -> api.ObjectMeta
	6,  // 11: api.MessageFilterRule.rule:type_name -> api.FilterRule
	21, // 12: api.AggregationRule.interval:type_name -> google.protobuf.Duration
	4,  // 13: api.MessageAggregationRule.typeMeta:type_name -> api.TypeMeta
	5,  // 14: api.MessageAggregationRule.objectMeta:type_name -> api.ObjectMeta
	8,  // 15: api.MessageAggregationRule.rule:type_name -> api.AggregationRule
	19, // 16: api.SendRule.config:type_name -> api.SendRule.ConfigEntry
	4,  // 17: api.MessageSendRule.typeMeta:type_name -> api.TypeMeta
	5,  // 18: api.MessageSendRule.objectMeta:type_name -> api.ObjectMeta
	10, // 19: api.MessageSendRule.rule:type_name -> api.SendRule
	4,  // 20: api.MessageTemplateRule.typeMeta:type_name -> api.TypeMeta
	5,  // 21: api.MessageTemplateRule.objectMeta:type_name -> api.ObjectMeta
	12, // 22: api.MessageTemplateRule.rule:type_name -> api.TemplateRule
	4,  // 23: api.RuleGroup.typeMeta:type_name -> api.TypeMeta
	5,  // 24: api.RuleGroup.objectMeta:type_name -> api.ObjectMeta
	20, // 25: api.Message.content:type_name -> api.Message.ContentEntry
	23, // 26: api.Message.ContentEntry.value:type_name -> google.protobuf.Any
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_strategy_proto_init() }
func file_strategy_proto_init() {
	if File_strategy_proto != nil {
		return
	}
	file_datasource_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_strategy_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Strategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TypeMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ObjectMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*FilterRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MessageFilterRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*AggregationRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MessageAggregationRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*SendRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*MessageSendRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*TemplateRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*MessageTemplateRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*RuleGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_strategy_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_strategy_proto_goTypes,
		DependencyIndexes: file_strategy_proto_depIdxs,
		EnumInfos:         file_strategy_proto_enumTypes,
		MessageInfos:      file_strategy_proto_msgTypes,
	}.Build()
	File_strategy_proto = out.File
	file_strategy_proto_rawDesc = nil
	file_strategy_proto_goTypes = nil
	file_strategy_proto_depIdxs = nil
}
