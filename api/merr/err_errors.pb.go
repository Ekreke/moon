// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package merr

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// Alert 用于表单验证错误
func IsAlert(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ALERT.String() && e.Code == 405
}

// Alert 用于表单验证错误
func ErrorAlert(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_ALERT.String(), fmt.Sprintf(format, args...))
}

// MODAL 用于弹窗验证错误
func IsModal(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MODAL.String() && e.Code == 405
}

// MODAL 用于弹窗验证错误
func ErrorModal(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_MODAL.String(), fmt.Sprintf(format, args...))
}

// TOAST 用于toast验证错误
func IsToast(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TOAST.String() && e.Code == 405
}

// TOAST 用于toast验证错误
func ErrorToast(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_TOAST.String(), fmt.Sprintf(format, args...))
}

// NOTIFICATION 用于通知验证错误
func IsNotification(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NOTIFICATION.String() && e.Code == 405
}

// NOTIFICATION 用于通知验证错误
func ErrorNotification(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_NOTIFICATION.String(), fmt.Sprintf(format, args...))
}

// Redirect 用于重定向验证错误, 跳转到指定页面
func IsRedirect(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REDIRECT.String() && e.Code == 405
}

// Redirect 用于重定向验证错误, 跳转到指定页面
func ErrorRedirect(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_REDIRECT.String(), fmt.Sprintf(format, args...))
}
