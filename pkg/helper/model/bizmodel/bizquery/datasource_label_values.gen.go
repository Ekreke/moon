// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package bizquery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/aide-cloud/moon/pkg/helper/model/bizmodel"
)

func newDatasourceLabelValue(db *gorm.DB, opts ...gen.DOOption) datasourceLabelValue {
	_datasourceLabelValue := datasourceLabelValue{}

	_datasourceLabelValue.datasourceLabelValueDo.UseDB(db, opts...)
	_datasourceLabelValue.datasourceLabelValueDo.UseModel(&bizmodel.DatasourceLabelValue{})

	tableName := _datasourceLabelValue.datasourceLabelValueDo.TableName()
	_datasourceLabelValue.ALL = field.NewAsterisk(tableName)
	_datasourceLabelValue.ID = field.NewUint32(tableName, "id")
	_datasourceLabelValue.Name = field.NewString(tableName, "name")
	_datasourceLabelValue.LabelID = field.NewUint32(tableName, "label_id")
	_datasourceLabelValue.CreatedAt = field.NewField(tableName, "created_at")
	_datasourceLabelValue.UpdatedAt = field.NewField(tableName, "updated_at")
	_datasourceLabelValue.DeletedAt = field.NewInt64(tableName, "deleted_at")

	_datasourceLabelValue.fillFieldMap()

	return _datasourceLabelValue
}

type datasourceLabelValue struct {
	datasourceLabelValueDo

	ALL       field.Asterisk
	ID        field.Uint32
	Name      field.String
	LabelID   field.Uint32
	CreatedAt field.Field
	UpdatedAt field.Field
	DeletedAt field.Int64

	fieldMap map[string]field.Expr
}

func (d datasourceLabelValue) Table(newTableName string) *datasourceLabelValue {
	d.datasourceLabelValueDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d datasourceLabelValue) As(alias string) *datasourceLabelValue {
	d.datasourceLabelValueDo.DO = *(d.datasourceLabelValueDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *datasourceLabelValue) updateTableName(table string) *datasourceLabelValue {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewUint32(table, "id")
	d.Name = field.NewString(table, "name")
	d.LabelID = field.NewUint32(table, "label_id")
	d.CreatedAt = field.NewField(table, "created_at")
	d.UpdatedAt = field.NewField(table, "updated_at")
	d.DeletedAt = field.NewInt64(table, "deleted_at")

	d.fillFieldMap()

	return d
}

func (d *datasourceLabelValue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *datasourceLabelValue) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 6)
	d.fieldMap["id"] = d.ID
	d.fieldMap["name"] = d.Name
	d.fieldMap["label_id"] = d.LabelID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
}

func (d datasourceLabelValue) clone(db *gorm.DB) datasourceLabelValue {
	d.datasourceLabelValueDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d datasourceLabelValue) replaceDB(db *gorm.DB) datasourceLabelValue {
	d.datasourceLabelValueDo.ReplaceDB(db)
	return d
}

type datasourceLabelValueDo struct{ gen.DO }

type IDatasourceLabelValueDo interface {
	gen.SubQuery
	Debug() IDatasourceLabelValueDo
	WithContext(ctx context.Context) IDatasourceLabelValueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDatasourceLabelValueDo
	WriteDB() IDatasourceLabelValueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDatasourceLabelValueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDatasourceLabelValueDo
	Not(conds ...gen.Condition) IDatasourceLabelValueDo
	Or(conds ...gen.Condition) IDatasourceLabelValueDo
	Select(conds ...field.Expr) IDatasourceLabelValueDo
	Where(conds ...gen.Condition) IDatasourceLabelValueDo
	Order(conds ...field.Expr) IDatasourceLabelValueDo
	Distinct(cols ...field.Expr) IDatasourceLabelValueDo
	Omit(cols ...field.Expr) IDatasourceLabelValueDo
	Join(table schema.Tabler, on ...field.Expr) IDatasourceLabelValueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDatasourceLabelValueDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDatasourceLabelValueDo
	Group(cols ...field.Expr) IDatasourceLabelValueDo
	Having(conds ...gen.Condition) IDatasourceLabelValueDo
	Limit(limit int) IDatasourceLabelValueDo
	Offset(offset int) IDatasourceLabelValueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDatasourceLabelValueDo
	Unscoped() IDatasourceLabelValueDo
	Create(values ...*bizmodel.DatasourceLabelValue) error
	CreateInBatches(values []*bizmodel.DatasourceLabelValue, batchSize int) error
	Save(values ...*bizmodel.DatasourceLabelValue) error
	First() (*bizmodel.DatasourceLabelValue, error)
	Take() (*bizmodel.DatasourceLabelValue, error)
	Last() (*bizmodel.DatasourceLabelValue, error)
	Find() ([]*bizmodel.DatasourceLabelValue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*bizmodel.DatasourceLabelValue, err error)
	FindInBatches(result *[]*bizmodel.DatasourceLabelValue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*bizmodel.DatasourceLabelValue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDatasourceLabelValueDo
	Assign(attrs ...field.AssignExpr) IDatasourceLabelValueDo
	Joins(fields ...field.RelationField) IDatasourceLabelValueDo
	Preload(fields ...field.RelationField) IDatasourceLabelValueDo
	FirstOrInit() (*bizmodel.DatasourceLabelValue, error)
	FirstOrCreate() (*bizmodel.DatasourceLabelValue, error)
	FindByPage(offset int, limit int) (result []*bizmodel.DatasourceLabelValue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDatasourceLabelValueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d datasourceLabelValueDo) Debug() IDatasourceLabelValueDo {
	return d.withDO(d.DO.Debug())
}

func (d datasourceLabelValueDo) WithContext(ctx context.Context) IDatasourceLabelValueDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d datasourceLabelValueDo) ReadDB() IDatasourceLabelValueDo {
	return d.Clauses(dbresolver.Read)
}

func (d datasourceLabelValueDo) WriteDB() IDatasourceLabelValueDo {
	return d.Clauses(dbresolver.Write)
}

func (d datasourceLabelValueDo) Session(config *gorm.Session) IDatasourceLabelValueDo {
	return d.withDO(d.DO.Session(config))
}

func (d datasourceLabelValueDo) Clauses(conds ...clause.Expression) IDatasourceLabelValueDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d datasourceLabelValueDo) Returning(value interface{}, columns ...string) IDatasourceLabelValueDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d datasourceLabelValueDo) Not(conds ...gen.Condition) IDatasourceLabelValueDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d datasourceLabelValueDo) Or(conds ...gen.Condition) IDatasourceLabelValueDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d datasourceLabelValueDo) Select(conds ...field.Expr) IDatasourceLabelValueDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d datasourceLabelValueDo) Where(conds ...gen.Condition) IDatasourceLabelValueDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d datasourceLabelValueDo) Order(conds ...field.Expr) IDatasourceLabelValueDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d datasourceLabelValueDo) Distinct(cols ...field.Expr) IDatasourceLabelValueDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d datasourceLabelValueDo) Omit(cols ...field.Expr) IDatasourceLabelValueDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d datasourceLabelValueDo) Join(table schema.Tabler, on ...field.Expr) IDatasourceLabelValueDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d datasourceLabelValueDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDatasourceLabelValueDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d datasourceLabelValueDo) RightJoin(table schema.Tabler, on ...field.Expr) IDatasourceLabelValueDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d datasourceLabelValueDo) Group(cols ...field.Expr) IDatasourceLabelValueDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d datasourceLabelValueDo) Having(conds ...gen.Condition) IDatasourceLabelValueDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d datasourceLabelValueDo) Limit(limit int) IDatasourceLabelValueDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d datasourceLabelValueDo) Offset(offset int) IDatasourceLabelValueDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d datasourceLabelValueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDatasourceLabelValueDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d datasourceLabelValueDo) Unscoped() IDatasourceLabelValueDo {
	return d.withDO(d.DO.Unscoped())
}

func (d datasourceLabelValueDo) Create(values ...*bizmodel.DatasourceLabelValue) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d datasourceLabelValueDo) CreateInBatches(values []*bizmodel.DatasourceLabelValue, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d datasourceLabelValueDo) Save(values ...*bizmodel.DatasourceLabelValue) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d datasourceLabelValueDo) First() (*bizmodel.DatasourceLabelValue, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.DatasourceLabelValue), nil
	}
}

func (d datasourceLabelValueDo) Take() (*bizmodel.DatasourceLabelValue, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.DatasourceLabelValue), nil
	}
}

func (d datasourceLabelValueDo) Last() (*bizmodel.DatasourceLabelValue, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.DatasourceLabelValue), nil
	}
}

func (d datasourceLabelValueDo) Find() ([]*bizmodel.DatasourceLabelValue, error) {
	result, err := d.DO.Find()
	return result.([]*bizmodel.DatasourceLabelValue), err
}

func (d datasourceLabelValueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*bizmodel.DatasourceLabelValue, err error) {
	buf := make([]*bizmodel.DatasourceLabelValue, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d datasourceLabelValueDo) FindInBatches(result *[]*bizmodel.DatasourceLabelValue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d datasourceLabelValueDo) Attrs(attrs ...field.AssignExpr) IDatasourceLabelValueDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d datasourceLabelValueDo) Assign(attrs ...field.AssignExpr) IDatasourceLabelValueDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d datasourceLabelValueDo) Joins(fields ...field.RelationField) IDatasourceLabelValueDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d datasourceLabelValueDo) Preload(fields ...field.RelationField) IDatasourceLabelValueDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d datasourceLabelValueDo) FirstOrInit() (*bizmodel.DatasourceLabelValue, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.DatasourceLabelValue), nil
	}
}

func (d datasourceLabelValueDo) FirstOrCreate() (*bizmodel.DatasourceLabelValue, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.DatasourceLabelValue), nil
	}
}

func (d datasourceLabelValueDo) FindByPage(offset int, limit int) (result []*bizmodel.DatasourceLabelValue, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d datasourceLabelValueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d datasourceLabelValueDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d datasourceLabelValueDo) Delete(models ...*bizmodel.DatasourceLabelValue) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *datasourceLabelValueDo) withDO(do gen.Dao) *datasourceLabelValueDo {
	d.DO = *do.(*gen.DO)
	return d
}
