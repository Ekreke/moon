// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package merr

import (
	context "context"
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
	i18n "github.com/nicksnyder/go-i18n/v2/i18n"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

type localizeKey struct{}

func FromContext(ctx context.Context) (*i18n.Localizer, bool) {
	local, ok := ctx.Value(localizeKey{}).(*i18n.Localizer)
	return local, ok
}

func WithLocalize(ctx context.Context, localize *i18n.Localizer) context.Context {
	return context.WithValue(ctx, localizeKey{}, localize)
}

// GetI18nMessage 获取错误信息
func GetI18nMessage(ctx context.Context, id string, args ...interface{}) string {
	if id == "" {
		return id
	}
	config := &i18n.LocalizeConfig{
		MessageID: id,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	local, ok := FromContext(ctx)
	if !ok {
		return id
	}
	localize, err := local.Localize(config)
	if err != nil {
		return id
	}
	return localize
}

const ErrorAlertID = "ALERT"

// IsAlert 用于表单验证错误
func IsAlert(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertID && e.Code == 400
}

// ErrorAlert 用于表单验证错误
func ErrorAlert(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertID, fmt.Sprintf(format, args...))
}

// ErrorAlertWithContext 用于表单验证错误
//
//	带上下文，支持国际化输出元数据
func ErrorAlertWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlert 用于表单验证错误
//  支持国际化输出
func ErrorI18nAlert(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "参数错误"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertID, localize)
		}
	}

	return err
}

const ErrorAlertPasswordErrID = "ALERT__PASSWORD_ERR"

// IsAlertPasswordErr 用于表单验证错误
//
//	PASSWORD_ERR
//	密码错误
func IsAlertPasswordErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertPasswordErrID && e.Code == 400
}

// ErrorAlertPasswordErr 用于表单验证错误
//
//	PASSWORD_ERR
//	密码错误
func ErrorAlertPasswordErr(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertPasswordErrID, fmt.Sprintf(format, args...))
}

// ErrorAlertPasswordErrWithContext 用于表单验证错误
//
//	PASSWORD_ERR
//	密码错误
//	带上下文，支持国际化输出元数据
func ErrorAlertPasswordErrWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertPasswordErrID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"password": GetI18nMessage(ctx, "PASSWORD_ERR"),
	})
}

// ErrorI18nAlertPasswordErr 用于表单验证错误
//  PASSWORD_ERR
//  密码错误
//  支持国际化输出
func ErrorI18nAlertPasswordErr(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "密码错误"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertPasswordErrID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertPasswordErrID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertPasswordErrID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertPasswordErrID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"password": GetI18nMessage(ctx, "PASSWORD_ERR"),
	})
}

const ErrorAlertPasswordSameErrID = "ALERT__PASSWORD_SAME_ERR"

// IsAlertPasswordSameErr 用于表单验证错误
//
//	PASSWORD_SAME_ERR
//	新旧密码不能相同
func IsAlertPasswordSameErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertPasswordSameErrID && e.Code == 400
}

// ErrorAlertPasswordSameErr 用于表单验证错误
//
//	PASSWORD_SAME_ERR
//	新旧密码不能相同
func ErrorAlertPasswordSameErr(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertPasswordSameErrID, fmt.Sprintf(format, args...))
}

// ErrorAlertPasswordSameErrWithContext 用于表单验证错误
//
//	PASSWORD_SAME_ERR
//	新旧密码不能相同
//	带上下文，支持国际化输出元数据
func ErrorAlertPasswordSameErrWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertPasswordSameErrID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"newPassword": GetI18nMessage(ctx, "PASSWORD_SAME_ERR"),
	})
}

// ErrorI18nAlertPasswordSameErr 用于表单验证错误
//  PASSWORD_SAME_ERR
//  新旧密码不能相同
//  支持国际化输出
func ErrorI18nAlertPasswordSameErr(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "新旧密码不能相同"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertPasswordSameErrID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertPasswordSameErrID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertPasswordSameErrID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertPasswordSameErrID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"newPassword": GetI18nMessage(ctx, "PASSWORD_SAME_ERR"),
	})
}

const ErrorAlertTeamNameExistErrID = "ALERT__TEAM_NAME_EXIST_ERR"

// IsAlertTeamNameExistErr 用于表单验证错误
//
//	TEAM_NAME_EXIST_ERR
//	团队名称已存在
func IsAlertTeamNameExistErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertTeamNameExistErrID && e.Code == 400
}

// ErrorAlertTeamNameExistErr 用于表单验证错误
//
//	TEAM_NAME_EXIST_ERR
//	团队名称已存在
func ErrorAlertTeamNameExistErr(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertTeamNameExistErrID, fmt.Sprintf(format, args...))
}

// ErrorAlertTeamNameExistErrWithContext 用于表单验证错误
//
//	TEAM_NAME_EXIST_ERR
//	团队名称已存在
//	带上下文，支持国际化输出元数据
func ErrorAlertTeamNameExistErrWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertTeamNameExistErrID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"name": GetI18nMessage(ctx, "TEAM_NAME_EXIST_ERR"),
	})
}

// ErrorI18nAlertTeamNameExistErr 用于表单验证错误
//  TEAM_NAME_EXIST_ERR
//  团队名称已存在
//  支持国际化输出
func ErrorI18nAlertTeamNameExistErr(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "团队名称已存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertTeamNameExistErrID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertTeamNameExistErrID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertTeamNameExistErrID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertTeamNameExistErrID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"name": GetI18nMessage(ctx, "TEAM_NAME_EXIST_ERR"),
	})
}

const ErrorAlertCaptchaErrID = "ALERT__CAPTCHA_ERR"

// IsAlertCaptchaErr 用于表单验证错误
//
//	CAPTCHA_ERR
//	验证码错误
func IsAlertCaptchaErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertCaptchaErrID && e.Code == 400
}

// ErrorAlertCaptchaErr 用于表单验证错误
//
//	CAPTCHA_ERR
//	验证码错误
func ErrorAlertCaptchaErr(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertCaptchaErrID, fmt.Sprintf(format, args...))
}

// ErrorAlertCaptchaErrWithContext 用于表单验证错误
//
//	CAPTCHA_ERR
//	验证码错误
//	带上下文，支持国际化输出元数据
func ErrorAlertCaptchaErrWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertCaptchaErrID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"code": GetI18nMessage(ctx, "CAPTCHA_ERR"),
	})
}

// ErrorI18nAlertCaptchaErr 用于表单验证错误
//  CAPTCHA_ERR
//  验证码错误
//  支持国际化输出
func ErrorI18nAlertCaptchaErr(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "验证码错误"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertCaptchaErrID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertCaptchaErrID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertCaptchaErrID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertCaptchaErrID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"code": GetI18nMessage(ctx, "CAPTCHA_ERR"),
	})
}

const ErrorAlertCaptchaExpireID = "ALERT__CAPTCHA_EXPIRE"

// IsAlertCaptchaExpire 用于表单验证错误
//
//	CAPTCHA_EXPIRE
//	验证码已过期
func IsAlertCaptchaExpire(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertCaptchaExpireID && e.Code == 400
}

// ErrorAlertCaptchaExpire 用于表单验证错误
//
//	CAPTCHA_EXPIRE
//	验证码已过期
func ErrorAlertCaptchaExpire(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertCaptchaExpireID, fmt.Sprintf(format, args...))
}

// ErrorAlertCaptchaExpireWithContext 用于表单验证错误
//
//	CAPTCHA_EXPIRE
//	验证码已过期
//	带上下文，支持国际化输出元数据
func ErrorAlertCaptchaExpireWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertCaptchaExpireID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"code": GetI18nMessage(ctx, "CAPTCHA_EXPIRE"),
	})
}

// ErrorI18nAlertCaptchaExpire 用于表单验证错误
//  CAPTCHA_EXPIRE
//  验证码已过期
//  支持国际化输出
func ErrorI18nAlertCaptchaExpire(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "验证码已过期"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertCaptchaExpireID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertCaptchaExpireID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertCaptchaExpireID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertCaptchaExpireID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"code": GetI18nMessage(ctx, "CAPTCHA_EXPIRE"),
	})
}

const ErrorAlertStrategyGroupNotEnableID = "ALERT__STRATEGY_GROUP_NOT_ENABLE"

// IsAlertStrategyGroupNotEnable 用于表单验证错误
//
//	STRATEGY_GROUP_NOT_ENABLE
//	策略组[%s]未启用, 不允许开启策略[%s]
func IsAlertStrategyGroupNotEnable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertStrategyGroupNotEnableID && e.Code == 400
}

// ErrorAlertStrategyGroupNotEnable 用于表单验证错误
//
//	STRATEGY_GROUP_NOT_ENABLE
//	策略组[%s]未启用, 不允许开启策略[%s]
func ErrorAlertStrategyGroupNotEnable(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertStrategyGroupNotEnableID, fmt.Sprintf(format, args...))
}

// ErrorAlertStrategyGroupNotEnableWithContext 用于表单验证错误
//
//	STRATEGY_GROUP_NOT_ENABLE
//	策略组[%s]未启用, 不允许开启策略[%s]
//	带上下文，支持国际化输出元数据
func ErrorAlertStrategyGroupNotEnableWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertStrategyGroupNotEnableID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"strategyGroup": GetI18nMessage(ctx, "STRATEGY_GROUP_NOT_ENABLE"),
	})
}

// ErrorI18nAlertStrategyGroupNotEnable 用于表单验证错误
//  STRATEGY_GROUP_NOT_ENABLE
//  策略组[%s]未启用, 不允许开启策略[%s]
//  支持国际化输出
func ErrorI18nAlertStrategyGroupNotEnable(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "策略组[%s]未启用, 不允许开启策略[%s]"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertStrategyGroupNotEnableID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertStrategyGroupNotEnableID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertStrategyGroupNotEnableID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertStrategyGroupNotEnableID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"strategyGroup": GetI18nMessage(ctx, "STRATEGY_GROUP_NOT_ENABLE"),
	})
}

const ErrorAlertAlertObjectDuplicateID = "ALERT__ALERT_OBJECT_DUPLICATE"

// IsAlertAlertObjectDuplicate 用于表单验证错误
//
//	ALERT_OBJECT_DUPLICATE
//	告警对象重复
func IsAlertAlertObjectDuplicate(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertAlertObjectDuplicateID && e.Code == 400
}

// ErrorAlertAlertObjectDuplicate 用于表单验证错误
//
//	ALERT_OBJECT_DUPLICATE
//	告警对象重复
func ErrorAlertAlertObjectDuplicate(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertAlertObjectDuplicateID, fmt.Sprintf(format, args...))
}

// ErrorAlertAlertObjectDuplicateWithContext 用于表单验证错误
//
//	ALERT_OBJECT_DUPLICATE
//	告警对象重复
//	带上下文，支持国际化输出元数据
func ErrorAlertAlertObjectDuplicateWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertAlertObjectDuplicateID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"alertObject": GetI18nMessage(ctx, "ALERT_OBJECT_DUPLICATE"),
	})
}

// ErrorI18nAlertAlertObjectDuplicate 用于表单验证错误
//  ALERT_OBJECT_DUPLICATE
//  告警对象重复
//  支持国际化输出
func ErrorI18nAlertAlertObjectDuplicate(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "告警对象重复"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertAlertObjectDuplicateID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertAlertObjectDuplicateID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertAlertObjectDuplicateID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertAlertObjectDuplicateID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"alertObject": GetI18nMessage(ctx, "ALERT_OBJECT_DUPLICATE"),
	})
}

const ErrorAlertAlertLevelDuplicateID = "ALERT__ALERT_LEVEL_DUPLICATE"

// IsAlertAlertLevelDuplicate 用于表单验证错误
//
//	ALERT_LEVEL_DUPLICATE
//	策略告警等级重复
func IsAlertAlertLevelDuplicate(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertAlertLevelDuplicateID && e.Code == 400
}

// ErrorAlertAlertLevelDuplicate 用于表单验证错误
//
//	ALERT_LEVEL_DUPLICATE
//	策略告警等级重复
func ErrorAlertAlertLevelDuplicate(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertAlertLevelDuplicateID, fmt.Sprintf(format, args...))
}

// ErrorAlertAlertLevelDuplicateWithContext 用于表单验证错误
//
//	ALERT_LEVEL_DUPLICATE
//	策略告警等级重复
//	带上下文，支持国际化输出元数据
func ErrorAlertAlertLevelDuplicateWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertAlertLevelDuplicateID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"alertLevel": GetI18nMessage(ctx, "ALERT_LEVEL_DUPLICATE"),
	})
}

// ErrorI18nAlertAlertLevelDuplicate 用于表单验证错误
//  ALERT_LEVEL_DUPLICATE
//  策略告警等级重复
//  支持国际化输出
func ErrorI18nAlertAlertLevelDuplicate(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "策略告警等级重复"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertAlertLevelDuplicateID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertAlertLevelDuplicateID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertAlertLevelDuplicateID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertAlertLevelDuplicateID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"alertLevel": GetI18nMessage(ctx, "ALERT_LEVEL_DUPLICATE"),
	})
}

const ErrorAlertEmailCaptchaErrID = "ALERT__EMAIL_CAPTCHA_ERR"

// IsAlertEmailCaptchaErr 用于表单验证错误
//
//	EMAIL_CAPTCHA_ERR
//	邮箱验证码错误
func IsAlertEmailCaptchaErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertEmailCaptchaErrID && e.Code == 400
}

// ErrorAlertEmailCaptchaErr 用于表单验证错误
//
//	EMAIL_CAPTCHA_ERR
//	邮箱验证码错误
func ErrorAlertEmailCaptchaErr(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertEmailCaptchaErrID, fmt.Sprintf(format, args...))
}

// ErrorAlertEmailCaptchaErrWithContext 用于表单验证错误
//
//	EMAIL_CAPTCHA_ERR
//	邮箱验证码错误
//	带上下文，支持国际化输出元数据
func ErrorAlertEmailCaptchaErrWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertEmailCaptchaErrID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"code": GetI18nMessage(ctx, "EMAIL_CAPTCHA_ERR"),
	})
}

// ErrorI18nAlertEmailCaptchaErr 用于表单验证错误
//  EMAIL_CAPTCHA_ERR
//  邮箱验证码错误
//  支持国际化输出
func ErrorI18nAlertEmailCaptchaErr(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "邮箱验证码错误"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertEmailCaptchaErrID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertEmailCaptchaErrID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertEmailCaptchaErrID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertEmailCaptchaErrID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"code": GetI18nMessage(ctx, "EMAIL_CAPTCHA_ERR"),
	})
}

const ErrorModalID = "MODAL"

// IsModal 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
func IsModal(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorModalID && e.Code == 405
}

// ErrorModal 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
func ErrorModal(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorModalID, fmt.Sprintf(format, args...))
}

// ErrorModalWithContext 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
//
//	带上下文，支持国际化输出元数据
func ErrorModalWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorModalID, fmt.Sprintf(format, args...))
}

// ErrorI18nModal 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
//  支持国际化输出
func ErrorI18nModal(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "请确认"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(405, ErrorModalID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorModalID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorModalID, msg).WithCause(err1)
		} else {
			err = errors.New(405, ErrorModalID, localize)
		}
	}

	return err
}

const ErrorModalConfirmDeleteID = "MODAL__CONFIRM_DELETE"

// IsModalConfirmDelete 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
//
//	CONFIRM_DELETE
//	确认删除
func IsModalConfirmDelete(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorModalConfirmDeleteID && e.Code == 405
}

// ErrorModalConfirmDelete 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
//
//	CONFIRM_DELETE
//	确认删除
func ErrorModalConfirmDelete(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorModalConfirmDeleteID, fmt.Sprintf(format, args...))
}

// ErrorModalConfirmDeleteWithContext 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
//
//	CONFIRM_DELETE
//	确认删除
//	带上下文，支持国际化输出元数据
func ErrorModalConfirmDeleteWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorModalConfirmDeleteID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"confirm":   GetI18nMessage(ctx, "CONFIRM_DELETE"),
		"cancel":    GetI18nMessage(ctx, "CANCEL_DELETE"),
		"requestID": GetI18nMessage(ctx, ""),
	})
}

// ErrorI18nModalConfirmDelete 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
//  CONFIRM_DELETE
//  确认删除
//  支持国际化输出
func ErrorI18nModalConfirmDelete(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "确认删除"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(405, ErrorModalConfirmDeleteID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorModalConfirmDeleteID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorModalConfirmDeleteID, msg).WithCause(err1)
		} else {
			err = errors.New(405, ErrorModalConfirmDeleteID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"confirm":   GetI18nMessage(ctx, "CONFIRM_DELETE"),
		"cancel":    GetI18nMessage(ctx, "CANCEL_DELETE"),
		"requestID": GetI18nMessage(ctx, ""),
	})
}

const ErrorModalConfirmUpdateID = "MODAL__CONFIRM_UPDATE"

// IsModalConfirmUpdate 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
//
//	CONFIRM_UPDATE
//	确认修改
func IsModalConfirmUpdate(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorModalConfirmUpdateID && e.Code == 405
}

// ErrorModalConfirmUpdate 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
//
//	CONFIRM_UPDATE
//	确认修改
func ErrorModalConfirmUpdate(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorModalConfirmUpdateID, fmt.Sprintf(format, args...))
}

// ErrorModalConfirmUpdateWithContext 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
//
//	CONFIRM_UPDATE
//	确认修改
//	带上下文，支持国际化输出元数据
func ErrorModalConfirmUpdateWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorModalConfirmUpdateID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"confirm":   GetI18nMessage(ctx, "CONFIRM_UPDATE"),
		"cancel":    GetI18nMessage(ctx, "CANCEL_UPDATE"),
		"requestID": GetI18nMessage(ctx, ""),
	})
}

// ErrorI18nModalConfirmUpdate 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
//  CONFIRM_UPDATE
//  确认修改
//  支持国际化输出
func ErrorI18nModalConfirmUpdate(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "确认修改"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(405, ErrorModalConfirmUpdateID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorModalConfirmUpdateID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorModalConfirmUpdateID, msg).WithCause(err1)
		} else {
			err = errors.New(405, ErrorModalConfirmUpdateID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"confirm":   GetI18nMessage(ctx, "CONFIRM_UPDATE"),
		"cancel":    GetI18nMessage(ctx, "CANCEL_UPDATE"),
		"requestID": GetI18nMessage(ctx, ""),
	})
}

const ErrorToastID = "TOAST"

// IsToast 用于toast验证错误， 资源不存在或者已存在时候提示
func IsToast(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastID && e.Code == 404
}

// ErrorToast 用于toast验证错误， 资源不存在或者已存在时候提示
func ErrorToast(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastID, fmt.Sprintf(format, args...))
}

// ErrorToastWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	带上下文，支持国际化输出元数据
func ErrorToastWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastID, fmt.Sprintf(format, args...))
}

// ErrorI18nToast 用于toast验证错误， 资源不存在或者已存在时候提示
//  支持国际化输出
func ErrorI18nToast(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "资源不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastID, localize)
		}
	}

	return err
}

const ErrorToastResourceNotFoundID = "TOAST__RESOURCE_NOT_FOUND"

// IsToastResourceNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	RESOURCE_NOT_FOUND
//	资源不存在
func IsToastResourceNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastResourceNotFoundID && e.Code == 404
}

// ErrorToastResourceNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	RESOURCE_NOT_FOUND
//	资源不存在
func ErrorToastResourceNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastResourceNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastResourceNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	RESOURCE_NOT_FOUND
//	资源不存在
//	带上下文，支持国际化输出元数据
func ErrorToastResourceNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastResourceNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastResourceNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//  RESOURCE_NOT_FOUND
//  资源不存在
//  支持国际化输出
func ErrorI18nToastResourceNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "资源不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastResourceNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastResourceNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastResourceNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastResourceNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastResourceExistID = "TOAST__RESOURCE_EXIST"

// IsToastResourceExist 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	RESOURCE_EXIST
//	资源已存在
func IsToastResourceExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastResourceExistID && e.Code == 404
}

// ErrorToastResourceExist 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	RESOURCE_EXIST
//	资源已存在
func ErrorToastResourceExist(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastResourceExistID, fmt.Sprintf(format, args...))
}

// ErrorToastResourceExistWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	RESOURCE_EXIST
//	资源已存在
//	带上下文，支持国际化输出元数据
func ErrorToastResourceExistWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastResourceExistID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastResourceExist 用于toast验证错误， 资源不存在或者已存在时候提示
//  RESOURCE_EXIST
//  资源已存在
//  支持国际化输出
func ErrorI18nToastResourceExist(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "资源已存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastResourceExistID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastResourceExistID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastResourceExistID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastResourceExistID, localize)
		}
	}

	return err
}

const ErrorToastUserNotFoundID = "TOAST__USER_NOT_FOUND"

// IsToastUserNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_FOUND
//	用户不存在
func IsToastUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastUserNotFoundID && e.Code == 404
}

// ErrorToastUserNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_FOUND
//	用户不存在
func ErrorToastUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastUserNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_FOUND
//	用户不存在
//	带上下文，支持国际化输出元数据
func ErrorToastUserNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastUserNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//  USER_NOT_FOUND
//  用户不存在
//  支持国际化输出
func ErrorI18nToastUserNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "用户不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastUserNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastUserNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastUserNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastUserNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastUsernameExistID = "TOAST__USERNAME_EXIST"

// IsToastUsernameExist 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USERNAME_EXIST
//	用户名已存在
func IsToastUsernameExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastUsernameExistID && e.Code == 404
}

// ErrorToastUsernameExist 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USERNAME_EXIST
//	用户名已存在
func ErrorToastUsernameExist(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUsernameExistID, fmt.Sprintf(format, args...))
}

// ErrorToastUsernameExistWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USERNAME_EXIST
//	用户名已存在
//	带上下文，支持国际化输出元数据
func ErrorToastUsernameExistWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUsernameExistID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastUsernameExist 用于toast验证错误， 资源不存在或者已存在时候提示
//  USERNAME_EXIST
//  用户名已存在
//  支持国际化输出
func ErrorI18nToastUsernameExist(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "用户名已存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastUsernameExistID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastUsernameExistID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastUsernameExistID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastUsernameExistID, localize)
		}
	}

	return err
}

const ErrorToastAlertGroupNotFoundID = "TOAST__ALERT_GROUP_NOT_FOUND"

// IsToastAlertGroupNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ALERT_GROUP_NOT_FOUND
//	告警组不存在
func IsToastAlertGroupNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastAlertGroupNotFoundID && e.Code == 404
}

// ErrorToastAlertGroupNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ALERT_GROUP_NOT_FOUND
//	告警组不存在
func ErrorToastAlertGroupNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastAlertGroupNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastAlertGroupNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ALERT_GROUP_NOT_FOUND
//	告警组不存在
//	带上下文，支持国际化输出元数据
func ErrorToastAlertGroupNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastAlertGroupNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastAlertGroupNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//  ALERT_GROUP_NOT_FOUND
//  告警组不存在
//  支持国际化输出
func ErrorI18nToastAlertGroupNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "告警组不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastAlertGroupNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastAlertGroupNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastAlertGroupNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastAlertGroupNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastDatasourceSyncingID = "TOAST__DATASOURCE_SYNCING"

// IsToastDatasourceSyncing 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DATASOURCE_SYNCING
//	数据源同步中
func IsToastDatasourceSyncing(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastDatasourceSyncingID && e.Code == 404
}

// ErrorToastDatasourceSyncing 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DATASOURCE_SYNCING
//	数据源同步中
func ErrorToastDatasourceSyncing(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastDatasourceSyncingID, fmt.Sprintf(format, args...))
}

// ErrorToastDatasourceSyncingWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DATASOURCE_SYNCING
//	数据源同步中
//	带上下文，支持国际化输出元数据
func ErrorToastDatasourceSyncingWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastDatasourceSyncingID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastDatasourceSyncing 用于toast验证错误， 资源不存在或者已存在时候提示
//  DATASOURCE_SYNCING
//  数据源同步中
//  支持国际化输出
func ErrorI18nToastDatasourceSyncing(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "数据源同步中"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastDatasourceSyncingID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastDatasourceSyncingID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastDatasourceSyncingID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastDatasourceSyncingID, localize)
		}
	}

	return err
}

const ErrorToastUserNotSubscribeID = "TOAST__USER_NOT_SUBSCRIBE"

// IsToastUserNotSubscribe 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_SUBSCRIBE
//	用户未订阅此策略
func IsToastUserNotSubscribe(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastUserNotSubscribeID && e.Code == 404
}

// ErrorToastUserNotSubscribe 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_SUBSCRIBE
//	用户未订阅此策略
func ErrorToastUserNotSubscribe(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotSubscribeID, fmt.Sprintf(format, args...))
}

// ErrorToastUserNotSubscribeWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_SUBSCRIBE
//	用户未订阅此策略
//	带上下文，支持国际化输出元数据
func ErrorToastUserNotSubscribeWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotSubscribeID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastUserNotSubscribe 用于toast验证错误， 资源不存在或者已存在时候提示
//  USER_NOT_SUBSCRIBE
//  用户未订阅此策略
//  支持国际化输出
func ErrorI18nToastUserNotSubscribe(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "用户未订阅此策略"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastUserNotSubscribeID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastUserNotSubscribeID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastUserNotSubscribeID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastUserNotSubscribeID, localize)
		}
	}

	return err
}

const ErrorToastTeamNotFoundID = "TOAST__TEAM_NOT_FOUND"

// IsToastTeamNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_NOT_FOUND
//	团队不存在
func IsToastTeamNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastTeamNotFoundID && e.Code == 404
}

// ErrorToastTeamNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_NOT_FOUND
//	团队不存在
func ErrorToastTeamNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastTeamNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastTeamNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_NOT_FOUND
//	团队不存在
//	带上下文，支持国际化输出元数据
func ErrorToastTeamNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastTeamNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastTeamNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//  TEAM_NOT_FOUND
//  团队不存在
//  支持国际化输出
func ErrorI18nToastTeamNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "团队不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastTeamNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastTeamNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastTeamNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastTeamNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastUserNotAllowRemoveSelfID = "TOAST__USER_NOT_ALLOW_REMOVE_SELF"

// IsToastUserNotAllowRemoveSelf 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_ALLOW_REMOVE_SELF
//	不允许移除自己
func IsToastUserNotAllowRemoveSelf(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastUserNotAllowRemoveSelfID && e.Code == 404
}

// ErrorToastUserNotAllowRemoveSelf 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_ALLOW_REMOVE_SELF
//	不允许移除自己
func ErrorToastUserNotAllowRemoveSelf(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotAllowRemoveSelfID, fmt.Sprintf(format, args...))
}

// ErrorToastUserNotAllowRemoveSelfWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_ALLOW_REMOVE_SELF
//	不允许移除自己
//	带上下文，支持国际化输出元数据
func ErrorToastUserNotAllowRemoveSelfWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotAllowRemoveSelfID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastUserNotAllowRemoveSelf 用于toast验证错误， 资源不存在或者已存在时候提示
//  USER_NOT_ALLOW_REMOVE_SELF
//  不允许移除自己
//  支持国际化输出
func ErrorI18nToastUserNotAllowRemoveSelf(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "不允许移除自己"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastUserNotAllowRemoveSelfID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastUserNotAllowRemoveSelfID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastUserNotAllowRemoveSelfID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastUserNotAllowRemoveSelfID, localize)
		}
	}

	return err
}

const ErrorToastUserNotAllowRemoveAdminID = "TOAST__USER_NOT_ALLOW_REMOVE_ADMIN"

// IsToastUserNotAllowRemoveAdmin 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_ALLOW_REMOVE_ADMIN
//	不允许移除团队管理员
func IsToastUserNotAllowRemoveAdmin(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastUserNotAllowRemoveAdminID && e.Code == 404
}

// ErrorToastUserNotAllowRemoveAdmin 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_ALLOW_REMOVE_ADMIN
//	不允许移除团队管理员
func ErrorToastUserNotAllowRemoveAdmin(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotAllowRemoveAdminID, fmt.Sprintf(format, args...))
}

// ErrorToastUserNotAllowRemoveAdminWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_ALLOW_REMOVE_ADMIN
//	不允许移除团队管理员
//	带上下文，支持国际化输出元数据
func ErrorToastUserNotAllowRemoveAdminWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotAllowRemoveAdminID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastUserNotAllowRemoveAdmin 用于toast验证错误， 资源不存在或者已存在时候提示
//  USER_NOT_ALLOW_REMOVE_ADMIN
//  不允许移除团队管理员
//  支持国际化输出
func ErrorI18nToastUserNotAllowRemoveAdmin(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "不允许移除团队管理员"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastUserNotAllowRemoveAdminID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastUserNotAllowRemoveAdminID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastUserNotAllowRemoveAdminID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastUserNotAllowRemoveAdminID, localize)
		}
	}

	return err
}

const ErrorToastUserNotAllowOperateAdminID = "TOAST__USER_NOT_ALLOW_OPERATE_ADMIN"

// IsToastUserNotAllowOperateAdmin 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_ALLOW_OPERATE_ADMIN
//	不允许操作自己的管理员身份
func IsToastUserNotAllowOperateAdmin(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastUserNotAllowOperateAdminID && e.Code == 404
}

// ErrorToastUserNotAllowOperateAdmin 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_ALLOW_OPERATE_ADMIN
//	不允许操作自己的管理员身份
func ErrorToastUserNotAllowOperateAdmin(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotAllowOperateAdminID, fmt.Sprintf(format, args...))
}

// ErrorToastUserNotAllowOperateAdminWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_ALLOW_OPERATE_ADMIN
//	不允许操作自己的管理员身份
//	带上下文，支持国际化输出元数据
func ErrorToastUserNotAllowOperateAdminWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotAllowOperateAdminID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastUserNotAllowOperateAdmin 用于toast验证错误， 资源不存在或者已存在时候提示
//  USER_NOT_ALLOW_OPERATE_ADMIN
//  不允许操作自己的管理员身份
//  支持国际化输出
func ErrorI18nToastUserNotAllowOperateAdmin(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "不允许操作自己的管理员身份"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastUserNotAllowOperateAdminID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastUserNotAllowOperateAdminID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastUserNotAllowOperateAdminID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastUserNotAllowOperateAdminID, localize)
		}
	}

	return err
}

const ErrorToastRoleNotFoundID = "TOAST__ROLE_NOT_FOUND"

// IsToastRoleNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ROLE_NOT_FOUND
//	角色不存在
func IsToastRoleNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastRoleNotFoundID && e.Code == 404
}

// ErrorToastRoleNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ROLE_NOT_FOUND
//	角色不存在
func ErrorToastRoleNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastRoleNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastRoleNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ROLE_NOT_FOUND
//	角色不存在
//	带上下文，支持国际化输出元数据
func ErrorToastRoleNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastRoleNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastRoleNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//  ROLE_NOT_FOUND
//  角色不存在
//  支持国际化输出
func ErrorI18nToastRoleNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "角色不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastRoleNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastRoleNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastRoleNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastRoleNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastTemplateStrategyNotFoundID = "TOAST__TEMPLATE_STRATEGY_NOT_FOUND"

// IsToastTemplateStrategyNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEMPLATE_STRATEGY_NOT_FOUND
//	策略模板不存在
func IsToastTemplateStrategyNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastTemplateStrategyNotFoundID && e.Code == 404
}

// ErrorToastTemplateStrategyNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEMPLATE_STRATEGY_NOT_FOUND
//	策略模板不存在
func ErrorToastTemplateStrategyNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastTemplateStrategyNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastTemplateStrategyNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEMPLATE_STRATEGY_NOT_FOUND
//	策略模板不存在
//	带上下文，支持国际化输出元数据
func ErrorToastTemplateStrategyNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastTemplateStrategyNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastTemplateStrategyNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//  TEMPLATE_STRATEGY_NOT_FOUND
//  策略模板不存在
//  支持国际化输出
func ErrorI18nToastTemplateStrategyNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "策略模板不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastTemplateStrategyNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastTemplateStrategyNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastTemplateStrategyNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastTemplateStrategyNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastUserNotExistID = "TOAST__USER_NOT_EXIST"

// IsToastUserNotExist 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_EXIST
//	用户不存在
func IsToastUserNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastUserNotExistID && e.Code == 404
}

// ErrorToastUserNotExist 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_EXIST
//	用户不存在
func ErrorToastUserNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotExistID, fmt.Sprintf(format, args...))
}

// ErrorToastUserNotExistWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_EXIST
//	用户不存在
//	带上下文，支持国际化输出元数据
func ErrorToastUserNotExistWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotExistID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastUserNotExist 用于toast验证错误， 资源不存在或者已存在时候提示
//  USER_NOT_EXIST
//  用户不存在
//  支持国际化输出
func ErrorI18nToastUserNotExist(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "用户不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastUserNotExistID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastUserNotExistID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastUserNotExistID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastUserNotExistID, localize)
		}
	}

	return err
}

const ErrorToastDashboardNotFoundID = "TOAST__DASHBOARD_NOT_FOUND"

// IsToastDashboardNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DASHBOARD_NOT_FOUND
//	图表大盘不存在
func IsToastDashboardNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastDashboardNotFoundID && e.Code == 404
}

// ErrorToastDashboardNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DASHBOARD_NOT_FOUND
//	图表大盘不存在
func ErrorToastDashboardNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastDashboardNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastDashboardNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DASHBOARD_NOT_FOUND
//	图表大盘不存在
//	带上下文，支持国际化输出元数据
func ErrorToastDashboardNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastDashboardNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastDashboardNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//  DASHBOARD_NOT_FOUND
//  图表大盘不存在
//  支持国际化输出
func ErrorI18nToastDashboardNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "图表大盘不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastDashboardNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastDashboardNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastDashboardNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastDashboardNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastRealtimeAlarmNotFoundID = "TOAST__REALTIME_ALARM_NOT_FOUND"

// IsToastRealtimeAlarmNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	REALTIME_ALARM_NOT_FOUND
//	实时告警不存在
func IsToastRealtimeAlarmNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastRealtimeAlarmNotFoundID && e.Code == 404
}

// ErrorToastRealtimeAlarmNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	REALTIME_ALARM_NOT_FOUND
//	实时告警不存在
func ErrorToastRealtimeAlarmNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastRealtimeAlarmNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastRealtimeAlarmNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	REALTIME_ALARM_NOT_FOUND
//	实时告警不存在
//	带上下文，支持国际化输出元数据
func ErrorToastRealtimeAlarmNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastRealtimeAlarmNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastRealtimeAlarmNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//  REALTIME_ALARM_NOT_FOUND
//  实时告警不存在
//  支持国际化输出
func ErrorI18nToastRealtimeAlarmNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "实时告警不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastRealtimeAlarmNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastRealtimeAlarmNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastRealtimeAlarmNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastRealtimeAlarmNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastDataSourceNotFoundID = "TOAST__DATA_SOURCE_NOT_FOUND"

// IsToastDataSourceNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DATA_SOURCE_NOT_FOUND
//	数据源不存在
func IsToastDataSourceNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastDataSourceNotFoundID && e.Code == 404
}

// ErrorToastDataSourceNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DATA_SOURCE_NOT_FOUND
//	数据源不存在
func ErrorToastDataSourceNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastDataSourceNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastDataSourceNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DATA_SOURCE_NOT_FOUND
//	数据源不存在
//	带上下文，支持国际化输出元数据
func ErrorToastDataSourceNotFoundWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastDataSourceNotFoundID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"dataSource": GetI18nMessage(ctx, "DATA_SOURCE_NOT_FOUND"),
	})
}

// ErrorI18nToastDataSourceNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//  DATA_SOURCE_NOT_FOUND
//  数据源不存在
//  支持国际化输出
func ErrorI18nToastDataSourceNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "数据源不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastDataSourceNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastDataSourceNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastDataSourceNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastDataSourceNotFoundID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"dataSource": GetI18nMessage(ctx, "DATA_SOURCE_NOT_FOUND"),
	})
}

const ErrorToastDictNotFoundID = "TOAST__DICT_NOT_FOUND"

// IsToastDictNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DICT_NOT_FOUND
//	字典不存在
func IsToastDictNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastDictNotFoundID && e.Code == 404
}

// ErrorToastDictNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DICT_NOT_FOUND
//	字典不存在
func ErrorToastDictNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastDictNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastDictNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DICT_NOT_FOUND
//	字典不存在
//	带上下文，支持国际化输出元数据
func ErrorToastDictNotFoundWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastDictNotFoundID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"dict": GetI18nMessage(ctx, "DICT_NOT_FOUND"),
	})
}

// ErrorI18nToastDictNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//  DICT_NOT_FOUND
//  字典不存在
//  支持国际化输出
func ErrorI18nToastDictNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "字典不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastDictNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastDictNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastDictNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastDictNotFoundID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"dict": GetI18nMessage(ctx, "DICT_NOT_FOUND"),
	})
}

const ErrorToastAlarmHookNotFoundID = "TOAST__ALARM_HOOK_NOT_FOUND"

// IsToastAlarmHookNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ALARM_HOOK_NOT_FOUND
//	告警hook不存在
func IsToastAlarmHookNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastAlarmHookNotFoundID && e.Code == 404
}

// ErrorToastAlarmHookNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ALARM_HOOK_NOT_FOUND
//	告警hook不存在
func ErrorToastAlarmHookNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastAlarmHookNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastAlarmHookNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ALARM_HOOK_NOT_FOUND
//	告警hook不存在
//	带上下文，支持国际化输出元数据
func ErrorToastAlarmHookNotFoundWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastAlarmHookNotFoundID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"alertHook": GetI18nMessage(ctx, "ALERT_HOOK_NOT_FOUND"),
	})
}

// ErrorI18nToastAlarmHookNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//  ALARM_HOOK_NOT_FOUND
//  告警hook不存在
//  支持国际化输出
func ErrorI18nToastAlarmHookNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "告警hook不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastAlarmHookNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastAlarmHookNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastAlarmHookNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastAlarmHookNotFoundID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"alertHook": GetI18nMessage(ctx, "ALERT_HOOK_NOT_FOUND"),
	})
}

const ErrorToastMenuNotFoundID = "TOAST__MENU_NOT_FOUND"

// IsToastMenuNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	MENU_NOT_FOUND
//	菜单不存在
func IsToastMenuNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastMenuNotFoundID && e.Code == 404
}

// ErrorToastMenuNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	MENU_NOT_FOUND
//	菜单不存在
func ErrorToastMenuNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastMenuNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastMenuNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	MENU_NOT_FOUND
//	菜单不存在
//	带上下文，支持国际化输出元数据
func ErrorToastMenuNotFoundWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastMenuNotFoundID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"menu": GetI18nMessage(ctx, "MENU_NOT_FOUND"),
	})
}

// ErrorI18nToastMenuNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//  MENU_NOT_FOUND
//  菜单不存在
//  支持国际化输出
func ErrorI18nToastMenuNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "菜单不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastMenuNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastMenuNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastMenuNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastMenuNotFoundID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"menu": GetI18nMessage(ctx, "MENU_NOT_FOUND"),
	})
}

const ErrorToastMetricNotFoundID = "TOAST__METRIC_NOT_FOUND"

// IsToastMetricNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	METRIC_NOT_FOUND
//	指标不存在
func IsToastMetricNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastMetricNotFoundID && e.Code == 404
}

// ErrorToastMetricNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	METRIC_NOT_FOUND
//	指标不存在
func ErrorToastMetricNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastMetricNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastMetricNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	METRIC_NOT_FOUND
//	指标不存在
//	带上下文，支持国际化输出元数据
func ErrorToastMetricNotFoundWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastMetricNotFoundID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"metric": GetI18nMessage(ctx, "METRIC_NOT_FOUND"),
	})
}

// ErrorI18nToastMetricNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//  METRIC_NOT_FOUND
//  指标不存在
//  支持国际化输出
func ErrorI18nToastMetricNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "指标不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastMetricNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastMetricNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastMetricNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastMetricNotFoundID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"metric": GetI18nMessage(ctx, "METRIC_NOT_FOUND"),
	})
}

const ErrorToastApiNotFoundID = "TOAST__API_NOT_FOUND"

// IsToastApiNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	API_NOT_FOUND
//	API不存在
func IsToastApiNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastApiNotFoundID && e.Code == 404
}

// ErrorToastApiNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	API_NOT_FOUND
//	API不存在
func ErrorToastApiNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastApiNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastApiNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	API_NOT_FOUND
//	API不存在
//	带上下文，支持国际化输出元数据
func ErrorToastApiNotFoundWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastApiNotFoundID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"api": GetI18nMessage(ctx, "API_NOT_FOUND"),
	})
}

// ErrorI18nToastApiNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//  API_NOT_FOUND
//  API不存在
//  支持国际化输出
func ErrorI18nToastApiNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "API不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastApiNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastApiNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastApiNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastApiNotFoundID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"api": GetI18nMessage(ctx, "API_NOT_FOUND"),
	})
}

const ErrorToastStrategyNotFoundID = "TOAST__STRATEGY_NOT_FOUND"

// IsToastStrategyNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	STRATEGY_NOT_FOUND
//	告警策略不存在
func IsToastStrategyNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastStrategyNotFoundID && e.Code == 404
}

// ErrorToastStrategyNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	STRATEGY_NOT_FOUND
//	告警策略不存在
func ErrorToastStrategyNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastStrategyNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastStrategyNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	STRATEGY_NOT_FOUND
//	告警策略不存在
//	带上下文，支持国际化输出元数据
func ErrorToastStrategyNotFoundWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastStrategyNotFoundID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"alertStrategy": GetI18nMessage(ctx, "ALERT_STRATEGY_NOT_FOUND"),
	})
}

// ErrorI18nToastStrategyNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//  STRATEGY_NOT_FOUND
//  告警策略不存在
//  支持国际化输出
func ErrorI18nToastStrategyNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "告警策略不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastStrategyNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastStrategyNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastStrategyNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastStrategyNotFoundID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"alertStrategy": GetI18nMessage(ctx, "ALERT_STRATEGY_NOT_FOUND"),
	})
}

const ErrorToastStrategyGroupNotFoundID = "TOAST__STRATEGY_GROUP_NOT_FOUND"

// IsToastStrategyGroupNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	STRATEGY_GROUP_NOT_FOUND
//	策略组不存在
func IsToastStrategyGroupNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastStrategyGroupNotFoundID && e.Code == 404
}

// ErrorToastStrategyGroupNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	STRATEGY_GROUP_NOT_FOUND
//	策略组不存在
func ErrorToastStrategyGroupNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastStrategyGroupNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastStrategyGroupNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	STRATEGY_GROUP_NOT_FOUND
//	策略组不存在
//	带上下文，支持国际化输出元数据
func ErrorToastStrategyGroupNotFoundWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastStrategyGroupNotFoundID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"strategyGroup": GetI18nMessage(ctx, "STRATEGY_GROUP_NOT_FOUND"),
	})
}

// ErrorI18nToastStrategyGroupNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//  STRATEGY_GROUP_NOT_FOUND
//  策略组不存在
//  支持国际化输出
func ErrorI18nToastStrategyGroupNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "策略组不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastStrategyGroupNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastStrategyGroupNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastStrategyGroupNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastStrategyGroupNotFoundID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"strategyGroup": GetI18nMessage(ctx, "STRATEGY_GROUP_NOT_FOUND"),
	})
}

const ErrorToastTeamInviteAlreadyExistsID = "TOAST__TEAM_INVITE_ALREADY_EXISTS"

// IsToastTeamInviteAlreadyExists 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_INVITE_ALREADY_EXISTS
//	%s,邀请记录已存在,或者已经加入团队!
func IsToastTeamInviteAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastTeamInviteAlreadyExistsID && e.Code == 404
}

// ErrorToastTeamInviteAlreadyExists 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_INVITE_ALREADY_EXISTS
//	%s,邀请记录已存在,或者已经加入团队!
func ErrorToastTeamInviteAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastTeamInviteAlreadyExistsID, fmt.Sprintf(format, args...))
}

// ErrorToastTeamInviteAlreadyExistsWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_INVITE_ALREADY_EXISTS
//	%s,邀请记录已存在,或者已经加入团队!
//	带上下文，支持国际化输出元数据
func ErrorToastTeamInviteAlreadyExistsWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastTeamInviteAlreadyExistsID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"teamInvite": GetI18nMessage(ctx, "TEAM_INVITE_ALREADY_EXISTS"),
	})
}

// ErrorI18nToastTeamInviteAlreadyExists 用于toast验证错误， 资源不存在或者已存在时候提示
//  TEAM_INVITE_ALREADY_EXISTS
//  %s,邀请记录已存在,或者已经加入团队!
//  支持国际化输出
func ErrorI18nToastTeamInviteAlreadyExists(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "%s,邀请记录已存在,或者已经加入团队!"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastTeamInviteAlreadyExistsID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastTeamInviteAlreadyExistsID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastTeamInviteAlreadyExistsID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastTeamInviteAlreadyExistsID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"teamInvite": GetI18nMessage(ctx, "TEAM_INVITE_ALREADY_EXISTS"),
	})
}

const ErrorToastTeamInviteNotFoundID = "TOAST__TEAM_INVITE_NOT_FOUND"

// IsToastTeamInviteNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_INVITE_NOT_FOUND
//	邀请记录不存在
func IsToastTeamInviteNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastTeamInviteNotFoundID && e.Code == 404
}

// ErrorToastTeamInviteNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_INVITE_NOT_FOUND
//	邀请记录不存在
func ErrorToastTeamInviteNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastTeamInviteNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastTeamInviteNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_INVITE_NOT_FOUND
//	邀请记录不存在
//	带上下文，支持国际化输出元数据
func ErrorToastTeamInviteNotFoundWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastTeamInviteNotFoundID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"teamInvite": GetI18nMessage(ctx, "TEAM_INVITE_NOT_FOUND"),
	})
}

// ErrorI18nToastTeamInviteNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//  TEAM_INVITE_NOT_FOUND
//  邀请记录不存在
//  支持国际化输出
func ErrorI18nToastTeamInviteNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "邀请记录不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastTeamInviteNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastTeamInviteNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastTeamInviteNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastTeamInviteNotFoundID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"teamInvite": GetI18nMessage(ctx, "TEAM_INVITE_NOT_FOUND"),
	})
}

const ErrorNotificationID = "NOTIFICATION"

// IsNotification 用于通知验证错误， 系统级别错误
func IsNotification(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorNotificationID && e.Code == 500
}

// ErrorNotification 用于通知验证错误， 系统级别错误
func ErrorNotification(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorNotificationID, fmt.Sprintf(format, args...))
}

// ErrorNotificationWithContext 用于通知验证错误， 系统级别错误
//
//	带上下文，支持国际化输出元数据
func ErrorNotificationWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorNotificationID, fmt.Sprintf(format, args...))
}

// ErrorI18nNotification 用于通知验证错误， 系统级别错误
//  支持国际化输出
func ErrorI18nNotification(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "服务器可能遇到了意外，非常抱歉！"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(500, ErrorNotificationID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorNotificationID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(500, ErrorNotificationID, msg).WithCause(err1)
		} else {
			err = errors.New(500, ErrorNotificationID, localize)
		}
	}

	return err
}

const ErrorNotificationSystemErrorID = "NOTIFICATION__SYSTEM_ERROR"

// IsNotificationSystemError 用于通知验证错误， 系统级别错误
//
//	SYSTEM_ERROR
//	服务器遭遇了外星人攻击，攻城狮和程序猿们正在抢修......
func IsNotificationSystemError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorNotificationSystemErrorID && e.Code == 500
}

// ErrorNotificationSystemError 用于通知验证错误， 系统级别错误
//
//	SYSTEM_ERROR
//	服务器遭遇了外星人攻击，攻城狮和程序猿们正在抢修......
func ErrorNotificationSystemError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorNotificationSystemErrorID, fmt.Sprintf(format, args...))
}

// ErrorNotificationSystemErrorWithContext 用于通知验证错误， 系统级别错误
//
//	SYSTEM_ERROR
//	服务器遭遇了外星人攻击，攻城狮和程序猿们正在抢修......
//	带上下文，支持国际化输出元数据
func ErrorNotificationSystemErrorWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorNotificationSystemErrorID, fmt.Sprintf(format, args...))
}

// ErrorI18nNotificationSystemError 用于通知验证错误， 系统级别错误
//  SYSTEM_ERROR
//  服务器遭遇了外星人攻击，攻城狮和程序猿们正在抢修......
//  支持国际化输出
func ErrorI18nNotificationSystemError(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "服务器遭遇了外星人攻击，攻城狮和程序猿们正在抢修......"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(500, ErrorNotificationSystemErrorID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorNotificationSystemErrorID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(500, ErrorNotificationSystemErrorID, msg).WithCause(err1)
		} else {
			err = errors.New(500, ErrorNotificationSystemErrorID, localize)
		}
	}

	return err
}

const ErrorNotificationUnsupportedDataSourceID = "NOTIFICATION__UNSUPPORTED_DATA_SOURCE"

// IsNotificationUnsupportedDataSource 用于通知验证错误， 系统级别错误
//
//	UNSUPPORTED_DATA_SOURCE
//	不支持的数据源类型
func IsNotificationUnsupportedDataSource(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorNotificationUnsupportedDataSourceID && e.Code == 500
}

// ErrorNotificationUnsupportedDataSource 用于通知验证错误， 系统级别错误
//
//	UNSUPPORTED_DATA_SOURCE
//	不支持的数据源类型
func ErrorNotificationUnsupportedDataSource(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorNotificationUnsupportedDataSourceID, fmt.Sprintf(format, args...))
}

// ErrorNotificationUnsupportedDataSourceWithContext 用于通知验证错误， 系统级别错误
//
//	UNSUPPORTED_DATA_SOURCE
//	不支持的数据源类型
//	带上下文，支持国际化输出元数据
func ErrorNotificationUnsupportedDataSourceWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorNotificationUnsupportedDataSourceID, fmt.Sprintf(format, args...))
}

// ErrorI18nNotificationUnsupportedDataSource 用于通知验证错误， 系统级别错误
//  UNSUPPORTED_DATA_SOURCE
//  不支持的数据源类型
//  支持国际化输出
func ErrorI18nNotificationUnsupportedDataSource(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "不支持的数据源类型"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(500, ErrorNotificationUnsupportedDataSourceID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorNotificationUnsupportedDataSourceID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(500, ErrorNotificationUnsupportedDataSourceID, msg).WithCause(err1)
		} else {
			err = errors.New(500, ErrorNotificationUnsupportedDataSourceID, localize)
		}
	}

	return err
}

const ErrorUnauthorizedID = "UNAUTHORIZED"

// IsUnauthorized 用于重定向验证错误, 跳转到指定页面， 认证级别提示
func IsUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorUnauthorizedID && e.Code == 401
}

// ErrorUnauthorized 用于重定向验证错误, 跳转到指定页面， 认证级别提示
func ErrorUnauthorized(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedID, fmt.Sprintf(format, args...))
}

// ErrorUnauthorizedWithContext 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	带上下文，支持国际化输出元数据
func ErrorUnauthorizedWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

// ErrorI18nUnauthorized 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//  支持国际化输出
func ErrorI18nUnauthorized(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "请先登录"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(401, ErrorUnauthorizedID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorUnauthorizedID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(401, ErrorUnauthorizedID, msg).WithCause(err1)
		} else {
			err = errors.New(401, ErrorUnauthorizedID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

const ErrorUnauthorizedJwtExpireID = "UNAUTHORIZED__JWT_EXPIRE"

// IsUnauthorizedJwtExpire 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	JWT_EXPIRE
//	登录已过期
func IsUnauthorizedJwtExpire(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorUnauthorizedJwtExpireID && e.Code == 401
}

// ErrorUnauthorizedJwtExpire 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	JWT_EXPIRE
//	登录已过期
func ErrorUnauthorizedJwtExpire(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedJwtExpireID, fmt.Sprintf(format, args...))
}

// ErrorUnauthorizedJwtExpireWithContext 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	JWT_EXPIRE
//	登录已过期
//	带上下文，支持国际化输出元数据
func ErrorUnauthorizedJwtExpireWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedJwtExpireID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

// ErrorI18nUnauthorizedJwtExpire 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//  JWT_EXPIRE
//  登录已过期
//  支持国际化输出
func ErrorI18nUnauthorizedJwtExpire(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "登录已过期"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(401, ErrorUnauthorizedJwtExpireID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorUnauthorizedJwtExpireID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(401, ErrorUnauthorizedJwtExpireID, msg).WithCause(err1)
		} else {
			err = errors.New(401, ErrorUnauthorizedJwtExpireID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

const ErrorUnauthorizedJwtOtherLoginID = "UNAUTHORIZED__JWT_OTHER_LOGIN"

// IsUnauthorizedJwtOtherLogin 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	JWT_OTHER_LOGIN
//	账号已在其他地方登录
func IsUnauthorizedJwtOtherLogin(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorUnauthorizedJwtOtherLoginID && e.Code == 401
}

// ErrorUnauthorizedJwtOtherLogin 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	JWT_OTHER_LOGIN
//	账号已在其他地方登录
func ErrorUnauthorizedJwtOtherLogin(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedJwtOtherLoginID, fmt.Sprintf(format, args...))
}

// ErrorUnauthorizedJwtOtherLoginWithContext 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	JWT_OTHER_LOGIN
//	账号已在其他地方登录
//	带上下文，支持国际化输出元数据
func ErrorUnauthorizedJwtOtherLoginWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedJwtOtherLoginID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

// ErrorI18nUnauthorizedJwtOtherLogin 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//  JWT_OTHER_LOGIN
//  账号已在其他地方登录
//  支持国际化输出
func ErrorI18nUnauthorizedJwtOtherLogin(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "账号已在其他地方登录"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(401, ErrorUnauthorizedJwtOtherLoginID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorUnauthorizedJwtOtherLoginID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(401, ErrorUnauthorizedJwtOtherLoginID, msg).WithCause(err1)
		} else {
			err = errors.New(401, ErrorUnauthorizedJwtOtherLoginID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

const ErrorUnauthorizedJwtBanID = "UNAUTHORIZED__JWT_BAN"

// IsUnauthorizedJwtBan 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	JWT_BAN
//	认证信息已登出，请重新登录
func IsUnauthorizedJwtBan(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorUnauthorizedJwtBanID && e.Code == 401
}

// ErrorUnauthorizedJwtBan 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	JWT_BAN
//	认证信息已登出，请重新登录
func ErrorUnauthorizedJwtBan(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedJwtBanID, fmt.Sprintf(format, args...))
}

// ErrorUnauthorizedJwtBanWithContext 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	JWT_BAN
//	认证信息已登出，请重新登录
//	带上下文，支持国际化输出元数据
func ErrorUnauthorizedJwtBanWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedJwtBanID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

// ErrorI18nUnauthorizedJwtBan 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//  JWT_BAN
//  认证信息已登出，请重新登录
//  支持国际化输出
func ErrorI18nUnauthorizedJwtBan(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "认证信息已登出，请重新登录"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(401, ErrorUnauthorizedJwtBanID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorUnauthorizedJwtBanID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(401, ErrorUnauthorizedJwtBanID, msg).WithCause(err1)
		} else {
			err = errors.New(401, ErrorUnauthorizedJwtBanID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

const ErrorUnauthorizedUserNotFoundID = "UNAUTHORIZED__USER_NOT_FOUND"

// IsUnauthorizedUserNotFound 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	USER_NOT_FOUND
//	账号不存在
func IsUnauthorizedUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorUnauthorizedUserNotFoundID && e.Code == 401
}

// ErrorUnauthorizedUserNotFound 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	USER_NOT_FOUND
//	账号不存在
func ErrorUnauthorizedUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedUserNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorUnauthorizedUserNotFoundWithContext 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	USER_NOT_FOUND
//	账号不存在
//	带上下文，支持国际化输出元数据
func ErrorUnauthorizedUserNotFoundWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedUserNotFoundID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

// ErrorI18nUnauthorizedUserNotFound 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//  USER_NOT_FOUND
//  账号不存在
//  支持国际化输出
func ErrorI18nUnauthorizedUserNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "账号不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(401, ErrorUnauthorizedUserNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorUnauthorizedUserNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(401, ErrorUnauthorizedUserNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(401, ErrorUnauthorizedUserNotFoundID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

const ErrorUnauthorizedUserBanID = "UNAUTHORIZED__USER_BAN"

// IsUnauthorizedUserBan 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	USER_BAN
//	您已被禁止使用该系统，请联系官方解除
func IsUnauthorizedUserBan(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorUnauthorizedUserBanID && e.Code == 401
}

// ErrorUnauthorizedUserBan 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	USER_BAN
//	您已被禁止使用该系统，请联系官方解除
func ErrorUnauthorizedUserBan(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedUserBanID, fmt.Sprintf(format, args...))
}

// ErrorUnauthorizedUserBanWithContext 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	USER_BAN
//	您已被禁止使用该系统，请联系官方解除
//	带上下文，支持国际化输出元数据
func ErrorUnauthorizedUserBanWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedUserBanID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

// ErrorI18nUnauthorizedUserBan 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//  USER_BAN
//  您已被禁止使用该系统，请联系官方解除
//  支持国际化输出
func ErrorI18nUnauthorizedUserBan(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "您已被禁止使用该系统，请联系官方解除"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(401, ErrorUnauthorizedUserBanID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorUnauthorizedUserBanID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(401, ErrorUnauthorizedUserBanID, msg).WithCause(err1)
		} else {
			err = errors.New(401, ErrorUnauthorizedUserBanID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

const ErrorForbiddenID = "FORBIDDEN"

// IsForbidden 权限不足时候提示, toast提示 权限级别提示
func IsForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorForbiddenID && e.Code == 403
}

// ErrorForbidden 权限不足时候提示, toast提示 权限级别提示
func ErrorForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorForbiddenID, fmt.Sprintf(format, args...))
}

// ErrorForbiddenWithContext 权限不足时候提示, toast提示 权限级别提示
//
//	带上下文，支持国际化输出元数据
func ErrorForbiddenWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorForbiddenID, fmt.Sprintf(format, args...))
}

// ErrorI18nForbidden 权限不足时候提示, toast提示 权限级别提示
//  支持国际化输出
func ErrorI18nForbidden(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "您没有操作权限, 请联系管理员开通该权限"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(403, ErrorForbiddenID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorForbiddenID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(403, ErrorForbiddenID, msg).WithCause(err1)
		} else {
			err = errors.New(403, ErrorForbiddenID, localize)
		}
	}

	return err
}

const ErrorForbiddenUserNotInTeamID = "FORBIDDEN__USER_NOT_IN_TEAM"

// IsForbiddenUserNotInTeam 权限不足时候提示, toast提示 权限级别提示
//
//	USER_NOT_IN_TEAM
//	您已不属于该团队
func IsForbiddenUserNotInTeam(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorForbiddenUserNotInTeamID && e.Code == 403
}

// ErrorForbiddenUserNotInTeam 权限不足时候提示, toast提示 权限级别提示
//
//	USER_NOT_IN_TEAM
//	您已不属于该团队
func ErrorForbiddenUserNotInTeam(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorForbiddenUserNotInTeamID, fmt.Sprintf(format, args...))
}

// ErrorForbiddenUserNotInTeamWithContext 权限不足时候提示, toast提示 权限级别提示
//
//	USER_NOT_IN_TEAM
//	您已不属于该团队
//	带上下文，支持国际化输出元数据
func ErrorForbiddenUserNotInTeamWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorForbiddenUserNotInTeamID, fmt.Sprintf(format, args...))
}

// ErrorI18nForbiddenUserNotInTeam 权限不足时候提示, toast提示 权限级别提示
//  USER_NOT_IN_TEAM
//  您已不属于该团队
//  支持国际化输出
func ErrorI18nForbiddenUserNotInTeam(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "您已不属于该团队"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(403, ErrorForbiddenUserNotInTeamID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorForbiddenUserNotInTeamID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(403, ErrorForbiddenUserNotInTeamID, msg).WithCause(err1)
		} else {
			err = errors.New(403, ErrorForbiddenUserNotInTeamID, localize)
		}
	}

	return err
}

const ErrorForbiddenMemberDisabledID = "FORBIDDEN__MEMBER_DISABLED"

// IsForbiddenMemberDisabled 权限不足时候提示, toast提示 权限级别提示
//
//	MEMBER_DISABLED
//	您已被该团队禁用操作，请联系管理员
func IsForbiddenMemberDisabled(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorForbiddenMemberDisabledID && e.Code == 403
}

// ErrorForbiddenMemberDisabled 权限不足时候提示, toast提示 权限级别提示
//
//	MEMBER_DISABLED
//	您已被该团队禁用操作，请联系管理员
func ErrorForbiddenMemberDisabled(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorForbiddenMemberDisabledID, fmt.Sprintf(format, args...))
}

// ErrorForbiddenMemberDisabledWithContext 权限不足时候提示, toast提示 权限级别提示
//
//	MEMBER_DISABLED
//	您已被该团队禁用操作，请联系管理员
//	带上下文，支持国际化输出元数据
func ErrorForbiddenMemberDisabledWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorForbiddenMemberDisabledID, fmt.Sprintf(format, args...))
}

// ErrorI18nForbiddenMemberDisabled 权限不足时候提示, toast提示 权限级别提示
//  MEMBER_DISABLED
//  您已被该团队禁用操作，请联系管理员
//  支持国际化输出
func ErrorI18nForbiddenMemberDisabled(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "您已被该团队禁用操作，请联系管理员"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(403, ErrorForbiddenMemberDisabledID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorForbiddenMemberDisabledID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(403, ErrorForbiddenMemberDisabledID, msg).WithCause(err1)
		} else {
			err = errors.New(403, ErrorForbiddenMemberDisabledID, localize)
		}
	}

	return err
}

const ErrorTooManyRequestsID = "TOO_MANY_REQUESTS"

// IsTooManyRequests 触发频率限制
func IsTooManyRequests(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorTooManyRequestsID && e.Code == 429
}

// ErrorTooManyRequests 触发频率限制
func ErrorTooManyRequests(format string, args ...interface{}) *errors.Error {
	return errors.New(429, ErrorTooManyRequestsID, fmt.Sprintf(format, args...))
}

// ErrorTooManyRequestsWithContext 触发频率限制
//
//	带上下文，支持国际化输出元数据
func ErrorTooManyRequestsWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(429, ErrorTooManyRequestsID, fmt.Sprintf(format, args...))
}

// ErrorI18nTooManyRequests 触发频率限制
//  支持国际化输出
func ErrorI18nTooManyRequests(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "请求太频繁，请稍后再试"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(429, ErrorTooManyRequestsID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorTooManyRequestsID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(429, ErrorTooManyRequestsID, msg).WithCause(err1)
		} else {
			err = errors.New(429, ErrorTooManyRequestsID, localize)
		}
	}

	return err
}
